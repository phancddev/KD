#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import sys
import mysql.connector
from mysql.connector import Error

# Import utility chung
sys.path.append(os.path.dirname(__file__))
from password_utils import hash_password, verify_password

def test_hash_consistency():
    """Ki·ªÉm tra t√≠nh nh·∫•t qu√°n c·ªßa thu·∫≠t to√°n hash"""
    print("===== KI·ªÇM TRA T√çNH NH·∫§T QU√ÅN C·ª¶A THU·∫¨T TO√ÅN HASH =====")
    
    # Test v·ªõi m·∫≠t kh·∫©u ƒë∆°n gi·∫£n
    test_password = "admin123"
    print(f"Test m·∫≠t kh·∫©u: {test_password}")
    
    # T·∫°o hash
    hashed = hash_password(test_password)
    print(f"Hash t·∫°o ra: {hashed}")
    
    # Ki·ªÉm tra verify
    is_valid = verify_password(test_password, hashed)
    print(f"Verify m·∫≠t kh·∫©u: {'Th√†nh c√¥ng' if is_valid else 'Th·∫•t b·∫°i'}")
    
    # Test v·ªõi m·∫≠t kh·∫©u kh√°c
    wrong_password = "wrong123"
    is_valid_wrong = verify_password(wrong_password, hashed)
    print(f"Verify m·∫≠t kh·∫©u sai: {'Th√†nh c√¥ng (L·ªñI!)' if is_valid_wrong else 'Th·∫•t b·∫°i (ƒê√öNG)'}")
    
    # Test v·ªõi salt c·ªë ƒë·ªãnh
    print("\n--- Test v·ªõi salt c·ªë ƒë·ªãnh ---")
    fixed_salt = "1234567890abcdef"
    from password_utils import hash_password_with_salt
    fixed_hash = hash_password_with_salt(test_password, fixed_salt)
    print(f"Hash v·ªõi salt c·ªë ƒë·ªãnh: {fixed_hash}")
    
    # Verify v·ªõi salt c·ªë ƒë·ªãnh
    is_valid_fixed = verify_password(test_password, fixed_hash)
    print(f"Verify v·ªõi salt c·ªë ƒë·ªãnh: {'Th√†nh c√¥ng' if is_valid_fixed else 'Th·∫•t b·∫°i'}")
    
    print("\n===== K·∫æT QU·∫¢ =====")
    if is_valid and not is_valid_wrong and is_valid_fixed:
        print("‚úÖ Thu·∫≠t to√°n hash ho·∫°t ƒë·ªông nh·∫•t qu√°n!")
        return True
    else:
        print("‚ùå C√≥ v·∫•n ƒë·ªÅ v·ªõi thu·∫≠t to√°n hash!")
        return False

def test_database_connection():
    """Ki·ªÉm tra k·∫øt n·ªëi database"""
    try:
        config = {
            'host': os.environ.get('DB_HOST', 'mariadb'),
            'port': int(os.environ.get('DB_PORT', 3306)),
            'user': os.environ.get('DB_USER', 'nqd_user'),
            'password': os.environ.get('DB_PASSWORD', 'nqd_password'),
            'database': os.environ.get('DB_NAME', 'nqd_database')
        }
        
        print(f"ƒêang k·∫øt n·ªëi ƒë·∫øn MariaDB t·∫°i {config['host']}:{config['port']}...")
        conn = mysql.connector.connect(**config)
        
        if conn.is_connected():
            print("‚úÖ K·∫øt n·ªëi database th√†nh c√¥ng!")
            
            # Test t·∫°o user m·ªõi
            cursor = conn.cursor()
            
            # T·∫°o user test
            test_username = "test_hash_user"
            test_password = "test123"
            
            # Ki·ªÉm tra user ƒë√£ t·ªìn t·∫°i ch∆∞a
            cursor.execute("SELECT id FROM users WHERE username = %s", (test_username,))
            if cursor.fetchone():
                print(f"User {test_username} ƒë√£ t·ªìn t·∫°i, x√≥a ƒë·ªÉ test l·∫°i...")
                cursor.execute("DELETE FROM users WHERE username = %s", (test_username,))
                conn.commit()
            
            # T·∫°o user m·ªõi v·ªõi hash
            hashed_password = hash_password(test_password)
            cursor.execute("""
                INSERT INTO users (username, password, email, full_name, is_admin) 
                VALUES (%s, %s, %s, %s, %s)
            """, (test_username, hashed_password, "test@test.com", "Test User", False))
            conn.commit()
            
            print(f"‚úÖ ƒê√£ t·∫°o user {test_username} v·ªõi hash: {hashed_password}")
            
            # Test verify t·ª´ database
            cursor.execute("SELECT password FROM users WHERE username = %s", (test_username,))
            result = cursor.fetchone()
            if result:
                stored_hash = result[0]
                print(f"Hash t·ª´ database: {stored_hash}")
                
                # Verify m·∫≠t kh·∫©u
                is_valid = verify_password(test_password, stored_hash)
                print(f"Verify m·∫≠t kh·∫©u t·ª´ database: {'Th√†nh c√¥ng' if is_valid else 'Th·∫•t b·∫°i'}")
                
                if is_valid:
                    print("‚úÖ Hash v√† verify ho·∫°t ƒë·ªông ho√†n h·∫£o v·ªõi database!")
                else:
                    print("‚ùå C√≥ v·∫•n ƒë·ªÅ v·ªõi hash/verify trong database!")
            
            cursor.close()
            conn.close()
            return True
            
    except Error as e:
        print(f"‚ùå L·ªói k·∫øt n·ªëi database: {e}")
        return False

def main():
    print("B·∫Øt ƒë·∫ßu ki·ªÉm tra t√≠nh nh·∫•t qu√°n c·ªßa thu·∫≠t to√°n hash...")
    
    # Test 1: Ki·ªÉm tra thu·∫≠t to√°n hash
    hash_test = test_hash_consistency()
    
    # Test 2: Ki·ªÉm tra v·ªõi database
    db_test = test_database_connection()
    
    print("\n===== T·ªîNG K·∫æT =====")
    if hash_test and db_test:
        print("üéâ T·∫•t c·∫£ test ƒë·ªÅu th√†nh c√¥ng! Thu·∫≠t to√°n hash ho·∫°t ƒë·ªông nh·∫•t qu√°n.")
    else:
        print("‚ö†Ô∏è C√≥ v·∫•n ƒë·ªÅ c·∫ßn kh·∫Øc ph·ª•c!")

if __name__ == "__main__":
    main() 