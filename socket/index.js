import { Server } from 'socket.io';
import { getRandomQuestions, checkAnswer } from '../db/questions.js';
import { createRoom, findRoomByCode, joinRoom, getRoomParticipants, updateRoomStatus, updateParticipantScore, getRoomResults } from '../db/rooms.js';
import { createGameSession, finishGameSession, saveUserAnswer, getUserGameHistory } from '../db/game-sessions.js';

let io;

// Kh·ªüi t·∫°o Socket.IO
// L∆∞u tr·ªØ timer cho t·ª´ng ph√≤ng (global scope)
const roomTimers = new Map();
// L∆∞u tr·ªØ th√¥ng tin ph√≤ng (global scope) - PERSISTENT ƒë·ªÉ gi·ªØ ng∆∞·ªùi d√πng k·ªÉ c·∫£ reload
const rooms = new Map();
// L∆∞u tr·ªØ th√¥ng tin ng∆∞·ªùi d√πng ƒëang online ƒë·ªÉ reconnect
const userSessions = new Map();

export function initSocketIO(server) {
  io = new Server(server);
  
  // Kh·ªüi t·∫°o bi·∫øn to√†n c·ª•c ƒë·ªÉ theo d√µi ng∆∞·ªùi d√πng online
  if (!global.onlineUsers) {
    global.onlineUsers = new Map();
  }
  
  // Kh·ªüi t·∫°o bi·∫øn to√†n c·ª•c ƒë·ªÉ theo d√µi tr·∫≠n ƒë·∫•u ƒëang di·ªÖn ra
  if (!global.activeGames) {
    global.activeGames = new Map();
  }
  
  // Kh·ªüi t·∫°o bi·∫øn to√†n c·ª•c ƒë·ªÉ l∆∞u tr·ªØ ho·∫°t ƒë·ªông g·∫ßn ƒë√¢y
  if (!global.recentActivities) {
    global.recentActivities = [];
  }
  
  // Kh·ªüi t·∫°o bi·∫øn to√†n c·ª•c ƒë·ªÉ l∆∞u tr·ªØ l·ªãch s·ª≠ ƒëƒÉng nh·∫≠p
  if (!global.loginHistory) {
    global.loginHistory = [];
  }
  
  // Kh·ªüi t·∫°o bi·∫øn to√†n c·ª•c ƒë·ªÉ ƒë·∫øm s·ªë tr·∫≠n ƒë·∫•u h√¥m nay
  if (!global.todayGames) {
    global.todayGames = 0;
  }
  
  // L∆∞u tr·ªØ ƒë·ªëi t∆∞·ª£ng io ƒë·ªÉ s·ª≠ d·ª•ng ·ªü n∆°i kh√°c
  global.io = io;
  
  io.on('connection', (socket) => {
    console.log('Ng∆∞·ªùi d√πng k·∫øt n·ªëi:', socket.id);
    
    // X·ª≠ l√Ω khi ng∆∞·ªùi d√πng t·∫°o ph√≤ng m·ªõi
    socket.on('create_room', async (data, callback) => {
      try {
        const { userId, username, roomName } = data;
        
        // T·∫°o ph√≤ng trong database
        const room = await createRoom(roomName, userId);
        
        // L∆∞u th√¥ng tin ph√≤ng trong b·ªô nh·ªõ - PERSISTENT
        rooms.set(room.code, {
          id: room.id,
          code: room.code,
          name: room.name,
          createdBy: userId,
          participants: [{
            id: userId,
            username: username,
            socketId: socket.id,
            score: 0,
            isCreator: true
          }],
          status: 'waiting',
          questions: [],
          currentQuestionIndex: -1,
          startTime: null,
          totalTimeRemaining: 60, // 60 gi√¢y t·ªïng cho t·∫•t c·∫£ c√¢u h·ªèi
          gameStartTime: null,
          gameHistory: [], // L∆∞u l·ªãch s·ª≠ c√°c tr·∫≠n ƒë·∫•u
          currentGame: null // Tr·∫≠n ƒë·∫•u hi·ªán t·∫°i n·∫øu c√≥
        });
        
        // L∆∞u session ng∆∞·ªùi d√πng ƒë·ªÉ reconnect
        userSessions.set(userId, {
          socketId: socket.id,
          roomCode: room.code,
          username: username,
          isCreator: true,
          lastSeen: Date.now()
        });
        
        // Tham gia socket v√†o room
        socket.join(room.code);
        
        callback({
          success: true,
          room: {
            id: room.id,
            code: room.code,
            name: room.name
          }
        });
      } catch (error) {
        console.error('L·ªói khi t·∫°o ph√≤ng:', error);
        callback({ success: false, error: 'Kh√¥ng th·ªÉ t·∫°o ph√≤ng' });
      }
    });
    
    // X·ª≠ l√Ω khi ng∆∞·ªùi d√πng tham gia ph√≤ng
    socket.on('join_room', async (data, callback) => {
      try {
        const { userId, username, roomCode } = data;
        
        // Ki·ªÉm tra ph√≤ng c√≥ t·ªìn t·∫°i kh√¥ng
        const roomInfo = await findRoomByCode(roomCode);
        if (!roomInfo) {
          return callback({ success: false, error: 'Ph√≤ng kh√¥ng t·ªìn t·∫°i' });
        }
        
        // Ki·ªÉm tra ph√≤ng c√≥ trong b·ªô nh·ªõ kh√¥ng
        if (!rooms.has(roomCode)) {
          // T·∫°o th√¥ng tin ph√≤ng trong b·ªô nh·ªõ n·∫øu ch∆∞a c√≥
          const participants = await getRoomParticipants(roomInfo.id);
          
          rooms.set(roomCode, {
            id: roomInfo.id,
            code: roomCode,
            name: roomInfo.name,
            createdBy: roomInfo.createdBy,
            participants: [],
            status: roomInfo.status,
            questions: [],
            currentQuestionIndex: -1,
            startTime: null,
            gameHistory: [],
            currentGame: null
          });
        }
        
        const room = rooms.get(roomCode);
        
        // Ki·ªÉm tra tr·∫°ng th√°i ph√≤ng
        if (room.status !== 'waiting' && room.status !== 'finished') {
          return callback({ success: false, error: 'Ph√≤ng ƒë√£ b·∫Øt ƒë·∫ßu ho·∫∑c k·∫øt th√∫c' });
        }
        
        // Ki·ªÉm tra ng∆∞·ªùi d√πng ƒë√£ tham gia ph√≤ng ch∆∞a
        const existingParticipant = room.participants.find(p => p.id === userId);
        if (existingParticipant) {
          // C·∫≠p nh·∫≠t socketId n·∫øu ng∆∞·ªùi d√πng ƒë√£ tham gia tr∆∞·ªõc ƒë√≥ (reconnect)
          existingParticipant.socketId = socket.id;
          existingParticipant.lastSeen = Date.now();
          existingParticipant.disconnected = false;
          
          console.log(`üîÑ ${username} reconnect v√†o ph√≤ng ${roomCode}`);
        } else {
          // Tham gia ph√≤ng trong database
          await joinRoom(room.id, userId);
          
          // Th√™m ng∆∞·ªùi d√πng v√†o danh s√°ch trong b·ªô nh·ªõ
          room.participants.push({
            id: userId,
            username: username,
            socketId: socket.id,
            score: 0,
            isCreator: false,
            lastSeen: Date.now(),
            disconnected: false
          });
        }
        
        // L∆∞u session ng∆∞·ªùi d√πng ƒë·ªÉ reconnect
        userSessions.set(userId, {
          socketId: socket.id,
          roomCode: roomCode,
          username: username,
          isCreator: room.createdBy === userId,
          lastSeen: Date.now()
        });
        
        // Tham gia socket v√†o room
        socket.join(roomCode);
        
        // Th√¥ng b√°o cho t·∫•t c·∫£ ng∆∞·ªùi trong ph√≤ng
        io.to(roomCode).emit('participant_joined', {
          participants: room.participants.map(p => ({
            id: p.id,
            username: p.username,
            isCreator: p.isCreator
          }))
        });
        
        callback({
          success: true,
          room: {
            id: room.id,
            code: room.code,
            name: room.name,
            createdBy: room.createdBy, // Th√™m createdBy v√†o response
            participants: room.participants.map(p => ({
              id: p.id,
              username: p.username,
              isCreator: p.isCreator
            })),
            status: room.status,
            currentGame: room.currentGame
          }
        });
      } catch (error) {
        console.error('L·ªói khi tham gia ph√≤ng:', error);
        callback({ success: false, error: 'Kh√¥ng th·ªÉ tham gia ph√≤ng' });
      }
    });
    
    // X·ª≠ l√Ω khi ch·ªß ph√≤ng b·∫Øt ƒë·∫ßu tr√≤ ch∆°i
    socket.on('start_game', async (data, callback) => {
      try {
        console.log('üéÆ start_game event received:', data);
        const { roomCode, userId } = data;
        
        // Ki·ªÉm tra ph√≤ng c√≥ t·ªìn t·∫°i kh√¥ng
        if (!rooms.has(roomCode)) {
          return callback({ success: false, error: 'Ph√≤ng kh√¥ng t·ªìn t·∫°i' });
        }
        
        const room = rooms.get(roomCode);
        
        // Ki·ªÉm tra ng∆∞·ªùi d√πng c√≥ ph·∫£i l√† ch·ªß ph√≤ng kh√¥ng
        if (room.createdBy !== userId) {
          return callback({ success: false, error: 'Ch·ªâ ch·ªß ph√≤ng m·ªõi c√≥ th·ªÉ b·∫Øt ƒë·∫ßu tr√≤ ch∆°i' });
        }
        
        // Ki·ªÉm tra s·ªë l∆∞·ª£ng ng∆∞·ªùi tham gia
        if (room.participants.length < 1) {
          return callback({ success: false, error: 'C·∫ßn √≠t nh·∫•t 1 ng∆∞·ªùi tham gia ƒë·ªÉ b·∫Øt ƒë·∫ßu' });
        }
        
        // L·∫•y c√¢u h·ªèi ng·∫´u nhi√™n t·ª´ API (gi·ªëng solo battle)
        console.log('üîç ƒêang l·∫•y c√¢u h·ªèi...');
        const questions = await fetchQuestionsFromAPI(20);
        console.log('‚úÖ ƒê√£ l·∫•y', questions.length, 'c√¢u h·ªèi');
        
        // T·∫°o tr·∫≠n ƒë·∫•u m·ªõi
        const gameId = Date.now();
        room.currentGame = {
          id: gameId,
          startTime: Date.now(),
          questions: questions,
          status: 'starting',
          participants: room.participants.map(p => ({
            id: p.id,
            username: p.username,
            score: 0,
            finished: false,
            resultSubmitted: false
          }))
        };
        
        room.questions = questions;
        room.currentQuestionIndex = -1;
        room.status = 'playing';
        
        // C·∫≠p nh·∫≠t tr·∫°ng th√°i ph√≤ng trong database
        await updateRoomStatus(room.id, 'playing');
        
        // T·∫°o th·ª© t·ª± c√¢u h·ªèi kh√°c nhau cho m·ªói ng∆∞·ªùi tham gia
        for (const participant of room.participants) {
          console.log('üë§ Setup participant:', participant.username);
          const session = await createGameSession(participant.id, room.id, false, questions.length);
          participant.sessionId = session.id;
          
          // T·∫°o th·ª© t·ª± c√¢u h·ªèi ng·∫´u nhi√™n cho participant n√†y
          participant.questionOrder = shuffleArray([...Array(questions.length).keys()]);
          participant.currentQuestionIndex = -1;
          participant.answers = [];
          console.log('üîÄ Question order for', participant.username, ':', participant.questionOrder);
        }
        
        // Th√¥ng b√°o cho t·∫•t c·∫£ ng∆∞·ªùi trong ph√≤ng
        io.to(roomCode).emit('game_starting', {
          message: 'Tr√≤ ch∆°i s·∫Øp b·∫Øt ƒë·∫ßu',
          countDown: 3
        });
        
        // ƒê·∫øm ng∆∞·ª£c 3 gi√¢y tr∆∞·ªõc khi g·ª≠i c√¢u h·ªèi ƒë·∫ßu ti√™n, sau ƒë√≥ ch·ªù th√™m 5 gi√¢y intro m·ªõi b·∫Øt ƒë·∫ßu ƒë·∫øm 60s
        setTimeout(() => {
          console.log('üéÆ G·ª≠i c√¢u h·ªèi ƒë·∫ßu ti√™n, ƒë·ª£i 5s intro r·ªìi m·ªõi b·∫Øt ƒë·∫ßu game timer cho ph√≤ng:', roomCode);
          // ƒê·∫∑t tr∆∞·ªõc gi√° tr·ªã th·ªùi gian t·ªïng ƒë·ªÉ client hi·ªÉn th·ªã 60s trong l√∫c intro
          room.totalTimeRemaining = 60;
          nextQuestion(room);
          setTimeout(() => {
            console.log('‚è∞ B·∫Øt ƒë·∫ßu game timer sau intro 5s cho ph√≤ng:', roomCode);
            startGameTimer(room);
          }, 5000);
        }, 3000);
        
        callback({ success: true });
      } catch (error) {
        console.error('L·ªói khi b·∫Øt ƒë·∫ßu tr√≤ ch∆°i:', error);
        callback({ success: false, error: 'Kh√¥ng th·ªÉ b·∫Øt ƒë·∫ßu tr√≤ ch∆°i' });
      }
    });
    
    // X·ª≠ l√Ω khi ng∆∞·ªùi ch∆°i ho√†n th√†nh game c√° nh√¢n
    socket.on('finish_game', async (data, callback) => {
      try {
        const { roomCode, userId, score, completionTime, questionsAnswered, allAnswers } = data;
        
        // Ki·ªÉm tra ph√≤ng c√≥ t·ªìn t·∫°i kh√¥ng
        if (!rooms.has(roomCode)) {
          return callback({ success: false, error: 'Ph√≤ng kh√¥ng t·ªìn t·∫°i' });
        }
        
        const room = rooms.get(roomCode);
        
        // T√¨m participant
        const participant = room.participants.find(p => p.id === userId);
        if (!participant) {
          return callback({ success: false, error: 'Ng∆∞·ªùi d√πng kh√¥ng trong ph√≤ng' });
        }
        
        // ‚úÖ C·∫≠p nh·∫≠t k·∫øt qu·∫£ t·ª´ client (client ƒë√£ t·ª± t√≠nh ƒëi·ªÉm)
        participant.score = score;
        participant.completionTime = completionTime;
        participant.questionsAnswered = questionsAnswered;
        participant.allAnswers = allAnswers || [];
        participant.finished = true;
        participant.resultSubmitted = true; // ƒê√°nh d·∫•u ƒë√£ nh·∫≠n k·∫øt qu·∫£
        participant.submitTime = Date.now();
        
        console.log(`‚úÖ ${participant.username} submitted result:`);
        console.log(`üìä Final score: ${score}`);
        console.log(`‚è±Ô∏è Completion time: ${completionTime}s`);
        console.log(`üìù Questions answered: ${questionsAnswered}`);
        console.log(`üïê Submit time: ${new Date(participant.submitTime).toLocaleTimeString()}`);
        
        // Th√¥ng b√°o cho t·∫•t c·∫£ ng∆∞·ªùi trong ph√≤ng
        io.to(roomCode).emit('player_finished', {
          userId,
          username: participant.username,
          score,
          completionTime,
          questionsAnswered
        });
        
        // Ki·ªÉm tra xem t·∫•t c·∫£ ng∆∞·ªùi ch∆°i ƒë√£ g·ª≠i k·∫øt qu·∫£ ch∆∞a
        const allSubmitted = room.participants.every(p => p.resultSubmitted);
        const submittedCount = room.participants.filter(p => p.resultSubmitted).length;
        
        console.log(`üìä Results submitted: ${submittedCount}/${room.participants.length}`);
        
        if (allSubmitted) {
          console.log('üéØ T·∫•t c·∫£ ng∆∞·ªùi ch∆°i ƒë√£ g·ª≠i k·∫øt qu·∫£! Hi·ªÉn th·ªã k·∫øt qu·∫£ ngay...');
          
          // Clear timer v√† x·ª≠ l√Ω k·∫øt qu·∫£ ngay
          if (roomTimers.has(roomCode)) {
            clearInterval(roomTimers.get(roomCode));
            roomTimers.delete(roomCode);
          }
          
          processFinalResults(room);
        } else {
          console.log(`‚è≥ Ch·ªù ${room.participants.length - submittedCount} ng∆∞·ªùi c√≤n l·∫°i g·ª≠i k·∫øt qu·∫£...`);
        }
        
        callback({ success: true });
      } catch (error) {
        console.error('L·ªói khi ho√†n th√†nh game:', error);
        callback({ success: false, error: 'Kh√¥ng th·ªÉ ho√†n th√†nh game' });
      }
    });

    // ‚ùå B·ªè submit_answer handler - Client t·ª± check answer local ƒë·ªÉ t·ªëi ∆∞u t·ªëc ƒë·ªô
    // Client s·∫Ω ch·ªâ g·ª≠i k·∫øt qu·∫£ cu·ªëi c√πng qua finish_game event
    
    // X·ª≠ l√Ω khi ch·ªß ph√≤ng k·∫øt th√∫c ph√≤ng
    socket.on('end_room', async (data, callback) => {
      try {
        const { roomCode, userId } = data;
        
        // Ki·ªÉm tra ph√≤ng c√≥ t·ªìn t·∫°i kh√¥ng
        if (!rooms.has(roomCode)) {
          return callback({ success: false, error: 'Ph√≤ng kh√¥ng t·ªìn t·∫°i' });
        }
        
        const room = rooms.get(roomCode);
        
        // Ki·ªÉm tra ng∆∞·ªùi d√πng c√≥ ph·∫£i ch·ªß ph√≤ng kh√¥ng
        if (room.createdBy !== userId) {
          return callback({ success: false, error: 'Ch·ªâ ch·ªß ph√≤ng m·ªõi c√≥ th·ªÉ k·∫øt th√∫c ph√≤ng' });
        }
        
        // Th√¥ng b√°o cho t·∫•t c·∫£ ng∆∞·ªùi trong ph√≤ng
        io.to(roomCode).emit('room_ended', {
          message: 'Ph√≤ng ƒë√£ ƒë∆∞·ª£c k·∫øt th√∫c b·ªüi ch·ªß ph√≤ng'
        });
        
        // X√≥a ph√≤ng
        rooms.delete(roomCode);
        
        // X√≥a session c·ªßa t·∫•t c·∫£ ng∆∞·ªùi d√πng trong ph√≤ng
        room.participants.forEach(p => {
          userSessions.delete(p.id);
        });
        
        callback({ success: true });
      } catch (error) {
        console.error('L·ªói khi k·∫øt th√∫c ph√≤ng:', error);
        callback({ success: false, error: 'Kh√¥ng th·ªÉ k·∫øt th√∫c ph√≤ng' });
      }
    });
    
    // X·ª≠ l√Ω khi ch·ªß ph√≤ng k·∫øt th√∫c game
    socket.on('end_game', async (data, callback) => {
      try {
        const { roomCode, userId } = data;
        
        // Ki·ªÉm tra ph√≤ng c√≥ t·ªìn t·∫°i kh√¥ng
        if (!rooms.has(roomCode)) {
          return callback({ success: false, error: 'Ph√≤ng kh√¥ng t·ªìn t·∫°i' });
        }
        
        const room = rooms.get(roomCode);
        
        // Ki·ªÉm tra ng∆∞·ªùi d√πng c√≥ ph·∫£i ch·ªß ph√≤ng kh√¥ng
        if (room.createdBy !== userId) {
          return callback({ success: false, error: 'Ch·ªâ ch·ªß ph√≤ng m·ªõi c√≥ th·ªÉ k·∫øt th√∫c game' });
        }
        
        // K·∫øt th√∫c game ngay l·∫≠p t·ª©c
        endGame(room);
        
        callback({ success: true });
      } catch (error) {
        console.error('L·ªói khi k·∫øt th√∫c game:', error);
        callback({ success: false, error: 'Kh√¥ng th·ªÉ k·∫øt th√∫c game' });
      }
    });
    
    // X·ª≠ l√Ω khi ng∆∞·ªùi d√πng ng·∫Øt k·∫øt n·ªëi
    socket.on('disconnect', () => {
      console.log('Ng∆∞·ªùi d√πng ng·∫Øt k·∫øt n·ªëi:', socket.id);
      
      // T√¨m ph√≤ng m√† ng∆∞·ªùi d√πng ƒëang tham gia
      for (const [roomCode, room] of rooms.entries()) {
        const participantIndex = room.participants.findIndex(p => p.socketId === socket.id);
        
        if (participantIndex !== -1) {
          const participant = room.participants[participantIndex];
          
          // ƒê√°nh d·∫•u ng∆∞·ªùi d√πng ƒë√£ ng·∫Øt k·∫øt n·ªëi nh∆∞ng KH√îNG x√≥a kh·ªèi ph√≤ng
          participant.disconnected = true;
          participant.lastSeen = Date.now();
          
          // C·∫≠p nh·∫≠t session
          if (userSessions.has(participant.id)) {
            const session = userSessions.get(participant.id);
            session.lastSeen = Date.now();
            session.disconnected = true;
          }
          
          // Th√¥ng b√°o cho t·∫•t c·∫£ ng∆∞·ªùi trong ph√≤ng
          io.to(roomCode).emit('participant_disconnected', {
            userId: participant.id,
            username: participant.username
          });
          
          // KH√îNG x√≥a ph√≤ng khi ng∆∞·ªùi d√πng disconnect - gi·ªØ ph√≤ng ƒë·ªÉ reconnect
          break;
        }
      }
    });
  });
  
  return io;
}

// H√†m chuy·ªÉn sang c√¢u h·ªèi ti·∫øp theo
async function nextQuestion(room) {
  console.log('üìã nextQuestion called for room:', room.code);
  console.log('üìã Room participants:', room.participants.length);
  console.log('üìã Room questions:', room.questions.length);
  
  // Ghi nh·ªõ th·ªùi gian b·∫Øt ƒë·∫ßu c√¢u h·ªèi
  room.startTime = Date.now();
  
  // G·ª≠i th√¥ng b√°o cho t·∫•t c·∫£ ng∆∞·ªùi tham gia r·∫±ng c√≥ c√¢u h·ªèi m·ªõi
  // M·ªói client s·∫Ω t·ª± l·∫•y c√¢u h·ªèi theo th·ª© t·ª± ri√™ng c·ªßa m√¨nh
  console.log('üì§ G·ª≠i event new_question_start cho ph√≤ng:', room.code);
  console.log('üì§ Data g·ª≠i:', {
    totalQuestions: room.questions.length,
    totalTimeLeft: room.totalTimeRemaining,
    hasQuestionData: !!room.questions
  });
  
  io.to(room.code).emit('new_question_start', {
    totalQuestions: room.questions.length,
    totalTimeLeft: room.totalTimeRemaining,
    questionData: room.questions // G·ª≠i t·∫•t c·∫£ c√¢u h·ªèi cho client
  });
}

// B·∫Øt ƒë·∫ßu timer t·ªïng cho ph√≤ng v·ªõi collection period 65 gi√¢y
function startGameTimer(room) {
  console.log('‚è∞ B·∫Øt ƒë·∫ßu game timer cho ph√≤ng:', room.code);
  console.log('üìä Participants:', room.participants.map(p => p.username));
  
  // X√≥a timer c≈© n·∫øu c√≥
  if (roomTimers.has(room.code)) {
    clearInterval(roomTimers.get(room.code));
  }
  
  room.gameStartTime = Date.now();
  room.collectionStartTime = Date.now();
  room.totalTimeRemaining = 60; // Game time for clients
  room.collectionTimeRemaining = 65; // Collection time for server
  room.gamePhase = 'playing'; // playing -> collecting -> finished
  
  // Initialize participant tracking
  room.participants.forEach(p => {
    p.finished = false;
    p.score = 0;
    p.completionTime = null;
    p.questionsAnswered = 0;
    p.resultSubmitted = false;
  });
  
  const timer = setInterval(() => {
    room.collectionTimeRemaining--;
    
    // Update game time (60s for clients)
    if (room.totalTimeRemaining > 0) {
      room.totalTimeRemaining--;
      
      // G·ª≠i timer update cho clients
      io.to(room.code).emit('timer_update', {
        totalTimeLeft: room.totalTimeRemaining
      });
      
      // Log every 10s during game
      if (room.totalTimeRemaining % 10 === 0) {
        console.log(`‚è∞ Game timer: ${room.totalTimeRemaining}s left`);
      }
      
      // Game time finished - start collection phase
      if (room.totalTimeRemaining <= 0) {
        console.log('üéÆ Game time finished! Starting result collection phase...');
        room.gamePhase = 'collecting';
        io.to(room.code).emit('game_time_finished');
      }
    }
    
    // Collection phase
    if (room.gamePhase === 'collecting') {
      const collectingTime = room.collectionTimeRemaining;
      console.log(`üìä Collection phase: ${collectingTime}s left, submitted: ${room.participants.filter(p => p.resultSubmitted).length}/${room.participants.length}`);
    }
    
    // Collection time finished - show results
    if (room.collectionTimeRemaining <= 0) {
      console.log('üìã Collection time finished! Processing final results...');
      clearInterval(timer);
      roomTimers.delete(room.code);
      
      // Process final results
      processFinalResults(room);
    }
  }, 1000);
  
  roomTimers.set(room.code, timer);
}

// X·ª≠ l√Ω k·∫øt qu·∫£ cu·ªëi c√πng
function processFinalResults(room) {
  console.log('üèÜ Processing final results for room:', room.code);
  
  // Log all participants status
  console.log('üë• Final participants status:');
  room.participants.forEach(p => {
    console.log(`   ${p.username}: submitted=${p.resultSubmitted}, score=${p.score}, time=${p.completionTime}, questions=${p.questionsAnswered}`);
  });
  
  // T√≠nh to√°n ranking v·ªõi t·∫•t c·∫£ participants
  const results = room.participants
    .map(p => ({
      userId: p.id,
      username: p.username,
      score: p.score || 0,
      completionTime: p.completionTime || 60,
      questionsAnswered: p.questionsAnswered || 0,
      submitted: p.resultSubmitted
    }))
    .sort((a, b) => {
      // S·∫Øp x·∫øp theo ƒëi·ªÉm s·ªë gi·∫£m d·∫ßn, r·ªìi theo th·ªùi gian tƒÉng d·∫ßn
      if (a.score !== b.score) {
        return b.score - a.score;
      }
      return a.completionTime - b.completionTime;
    })
    .map((result, index) => ({
      ...result,
      rank: index + 1
    }));
  
  console.log('üèÜ Final ranking:', results);
  
  // L∆∞u k·∫øt qu·∫£ v√†o DB cho t·ª´ng ng∆∞·ªùi ch∆°i
  (async () => {
    try {
      for (const participant of room.participants) {
        // Tr√°nh l∆∞u nhi·ªÅu l·∫ßn n·∫øu ƒë√£ l∆∞u r·ªìi
        if (participant.sessionSaved) continue;
        
        const sessionId = participant.sessionId;
        if (!sessionId) continue;
        
        const submittedAnswers = Array.isArray(participant.allAnswers) ? participant.allAnswers : [];
        const correctCount = submittedAnswers.filter(a => a && a.isCorrect).length;
        
        // L∆∞u t·ª´ng c√¢u tr·∫£ l·ªùi ƒë∆∞·ª£c g·ª≠i t·ª´ client
        if (submittedAnswers.length > 0) {
          const saveOps = submittedAnswers.map(a => {
            const questionId = a.questionId;
            const userAnswer = a.userAnswer === undefined || a.userAnswer === null ? 'none' : String(a.userAnswer);
            const isCorrect = !!a.isCorrect;
            const answerTime = Number.isFinite(a.answerTime) ? a.answerTime : null;
            return saveUserAnswer(sessionId, questionId, userAnswer, isCorrect, answerTime);
          });
          await Promise.allSettled(saveOps);
        }
        
        // N·∫øu c√≤n thi·∫øu c√¢u ch∆∞a tr·∫£ l·ªùi, c√≥ th·ªÉ l∆∞u l√† kh√¥ng tr·∫£ l·ªùi (t√πy ch·ªçn)
        // const totalQuestions = Array.isArray(room.questions) ? room.questions.length : 0;
        // if (totalQuestions > submittedAnswers.length) {
        //   const answeredIds = new Set(submittedAnswers.map(a => a.questionId));
        //   const missingOps = room.questions
        //     .filter(q => !answeredIds.has(q.id))
        //     .map(q => saveUserAnswer(sessionId, q.id, null, false, 0));
        //   await Promise.allSettled(missingOps);
        // }
        
        // K·∫øt th√∫c phi√™n ch∆°i v·ªõi ƒëi·ªÉm v√† s·ªë c√¢u ƒë√∫ng
        await finishGameSession(sessionId, participant.score || 0, correctCount);
        participant.sessionSaved = true;
      }
      
      // TƒÉng b·ªô ƒë·∫øm tr·∫≠n ƒë·∫•u h√¥m nay
      if (typeof global.todayGames === 'number') {
        global.todayGames += 1;
      }
    } catch (err) {
      console.error('L·ªói khi l∆∞u l·ªãch s·ª≠ ph√≤ng v√†o DB:', err);
    }
  })();
  
  // L∆∞u k·∫øt qu·∫£ v√†o l·ªãch s·ª≠ ph√≤ng
  if (room.currentGame) {
    room.gameHistory.push({
      gameId: room.currentGame.id,
      startTime: room.currentGame.startTime,
      endTime: Date.now(),
      results: results,
      participants: room.participants.length
    });
  }
  
  // C·∫≠p nh·∫≠t tr·∫°ng th√°i ph√≤ng v·ªÅ waiting ƒë·ªÉ c√≥ th·ªÉ ch∆°i ti·∫øp
  room.status = 'waiting';
  room.currentGame = null;
  
  // Reset tr·∫°ng th√°i ng∆∞·ªùi tham gia ƒë·ªÉ chu·∫©n b·ªã tr·∫≠n m·ªõi
  room.participants.forEach(p => {
    p.score = 0;
    p.finished = false;
    p.resultSubmitted = false;
    p.completionTime = null;
    p.questionsAnswered = 0;
    p.answers = [];
    p.currentQuestionIndex = -1;
  });
  
  // C·∫≠p nh·∫≠t tr·∫°ng th√°i ph√≤ng trong database
  updateRoomStatus(room.id, 'waiting').catch(console.error);
  
  // G·ª≠i k·∫øt qu·∫£ cu·ªëi c√πng
  io.to(room.code).emit('game_results', { 
    results,
    canPlayAgain: true,
    message: 'Tr·∫≠n ƒë·∫•u k·∫øt th√∫c! B·∫°n c√≥ th·ªÉ ch∆°i ti·∫øp ho·∫∑c quay v·ªÅ ph√≤ng ch·ªù.'
  });
  
  // KH√îNG x√≥a ph√≤ng - gi·ªØ ph√≤ng ƒë·ªÉ ch∆°i ti·∫øp
  console.log('‚úÖ Ph√≤ng ƒë∆∞·ª£c gi·ªØ l·∫°i ƒë·ªÉ ch∆°i ti·∫øp:', room.code);
}

// L∆∞u c√¢u tr·∫£ l·ªùi cho t·∫•t c·∫£ c√¢u h·ªèi c√≤n l·∫°i
async function saveRemainingAnswers(room) {
  for (const participant of room.participants) {
    if (!participant.disconnected) {
      // L∆∞u t·∫•t c·∫£ c√¢u h·ªèi c√≤n l·∫°i c·ªßa participant n√†y
      for (let i = participant.currentQuestionIndex + 1; i < room.questions.length; i++) {
        const questionIndex = participant.questionOrder[i];
        const question = room.questions[questionIndex];
        
        await saveUserAnswer(
          participant.sessionId,
          question.id,
          null, // Kh√¥ng c√≥ c√¢u tr·∫£ l·ªùi
          false,
          0 // H·∫øt th·ªùi gian
        );
      }
    }
  }
}

// H√†m k·∫øt th√∫c tr√≤ ch∆°i
async function endGame(room) {
  try {
    // D·ª´ng timer
    if (roomTimers.has(room.code)) {
      clearInterval(roomTimers.get(room.code));
      roomTimers.delete(room.code);
    }
    
    // C·∫≠p nh·∫≠t tr·∫°ng th√°i ph√≤ng v·ªÅ waiting ƒë·ªÉ c√≥ th·ªÉ ch∆°i ti·∫øp
    room.status = 'waiting';
    room.currentGame = null;
    
    // Reset tr·∫°ng th√°i ng∆∞·ªùi tham gia ƒë·ªÉ chu·∫©n b·ªã tr·∫≠n m·ªõi
    room.participants.forEach(p => {
      p.score = 0;
      p.finished = false;
      p.resultSubmitted = false;
      p.completionTime = null;
      p.questionsAnswered = 0;
      p.answers = [];
      p.currentQuestionIndex = -1;
    });
    
    // C·∫≠p nh·∫≠t tr·∫°ng th√°i ph√≤ng trong database
    await updateRoomStatus(room.id, 'waiting');
    
    // G·ª≠i th√¥ng b√°o k·∫øt th√∫c game cho t·∫•t c·∫£ ng∆∞·ªùi tham gia
    io.to(room.code).emit('game_ended', {
      message: 'Tr·∫≠n ƒë·∫•u ƒë√£ k·∫øt th√∫c! B·∫°n c√≥ th·ªÉ ch∆°i ti·∫øp ho·∫∑c quay v·ªÅ ph√≤ng ch·ªù.',
      canPlayAgain: true
    });
    
    // KH√îNG x√≥a ph√≤ng - gi·ªØ ph√≤ng ƒë·ªÉ ch∆°i ti·∫øp
    console.log('‚úÖ Ph√≤ng ƒë∆∞·ª£c gi·ªØ l·∫°i ƒë·ªÉ ch∆°i ti·∫øp sau khi end game:', room.code);
  } catch (error) {
    console.error('L·ªói khi k·∫øt th√∫c tr√≤ ch∆°i:', error);
  }
}

// L·∫•y ƒë·ªëi t∆∞·ª£ng io
// Th√™m ng∆∞·ªùi d√πng v√†o danh s√°ch online
export function addOnlineUser(userId, username, ip) {
  if (!global.onlineUsers) {
    global.onlineUsers = new Map();
  }
  
  global.onlineUsers.set(userId, {
    userId,
    username,
    ip,
    loginTime: new Date(),
    inGame: false
  });
  
  // Th√™m v√†o l·ªãch s·ª≠ ƒëƒÉng nh·∫≠p
  if (!global.loginHistory) {
    global.loginHistory = [];
  }
  
  global.loginHistory.push({
    userId,
    username,
    ip,
    timestamp: new Date(),
    status: 'success'
  });
  
  // Th√™m ho·∫°t ƒë·ªông m·ªõi
  addActivity({
    username,
    action: 'ƒë√£ ƒëƒÉng nh·∫≠p v√†o h·ªá th·ªëng',
    timestamp: new Date()
  });
  
  // G·ª≠i s·ª± ki·ªán th√¥ng b√°o cho admin
  if (global.io) {
    global.io.emit('user_login', {
      userId,
      username,
      onlineUsers: global.onlineUsers.size
    });
  }
}

// X√≥a ng∆∞·ªùi d√πng kh·ªèi danh s√°ch online
export function removeOnlineUser(userId) {
  if (!global.onlineUsers) {
    return;
  }
  
  // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng tr∆∞·ªõc khi x√≥a
  const userSession = global.onlineUsers.get(userId);
  
  if (userSession) {
    // X√≥a ng∆∞·ªùi d√πng kh·ªèi danh s√°ch
    global.onlineUsers.delete(userId);
    
    // Th√™m ho·∫°t ƒë·ªông m·ªõi
    addActivity({
      username: userSession.username,
      action: 'ƒë√£ ƒëƒÉng xu·∫•t kh·ªèi h·ªá th·ªëng',
      timestamp: new Date()
    });
    
    // G·ª≠i s·ª± ki·ªán th√¥ng b√°o cho admin
    if (global.io) {
      global.io.emit('user_logout', {
        userId,
        username: userSession.username,
        onlineUsers: global.onlineUsers.size
      });
    }
  }
}

// Th√™m ho·∫°t ƒë·ªông m·ªõi
function addActivity(activity) {
  if (!global.recentActivities) {
    global.recentActivities = [];
  }
  
  // Th√™m v√†o ƒë·∫ßu m·∫£ng
  global.recentActivities.unshift(activity);
  
  // Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng ho·∫°t ƒë·ªông l∆∞u tr·ªØ
  const maxActivities = 100;
  if (global.recentActivities.length > maxActivities) {
    global.recentActivities = global.recentActivities.slice(0, maxActivities);
  }
}

// Helper function: L·∫•y c√¢u h·ªèi t·ª´ API (gi·ªëng solo battle)
async function fetchQuestionsFromAPI(count = 20) {
  try {
    console.log('üîç Fetching questions from database, count:', count);
    // S·ª≠ d·ª•ng direct database call thay v√¨ HTTP API ƒë·ªÉ tr√°nh v·∫•n ƒë·ªÅ circular call
    const questions = await getRandomQuestions(count);
    console.log('üìã Questions fetched:', questions ? questions.length : 0);
    
    if (!questions || !Array.isArray(questions) || questions.length === 0) {
      console.log('‚ùå No questions found in database');
      throw new Error('Kh√¥ng c√≥ c√¢u h·ªèi n√†o trong database');
    }
    
    console.log('‚úÖ Questions ready:', questions.length);
    return questions;
  } catch (error) {
    console.error('‚ùå L·ªói khi l·∫•y c√¢u h·ªèi:', error);
    throw error;
  }
}

// Helper function: Shuffle array
function shuffleArray(array) {
  const shuffled = [...array];
  for (let i = shuffled.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
  }
  return shuffled;
}

export function getIO() {
  return io;
}