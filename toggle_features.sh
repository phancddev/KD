#!/bin/bash

# Script ƒë·ªÉ b·∫≠t/t·∫Øt c√°c ch·ª©c nƒÉng c·ªßa ·ª©ng d·ª•ng
# S·ª≠ d·ª•ng: ./toggle_features.sh [feature] [on/off]

FEATURES_FILE="features.config.js"

# M√†u s·∫Øc cho output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# H√†m t√¨m t√™n container t·ª± ƒë·ªông
find_container_name() {
    # T√¨m container c√≥ port 2701 (port c·ªßa app)
    local container_name=$(docker ps --format "table {{.Names}}\t{{.Ports}}" | grep ":2701->" | awk '{print $1}')
    
    if [ -z "$container_name" ]; then
        # N·∫øu kh√¥ng t√¨m th·∫•y port 2701, t√¨m container c√≥ t√™n ch·ª©a 'app' ho·∫∑c 'kd'
        container_name=$(docker ps --format "{{.Names}}" | grep -E "(app|kd)" | head -1)
    fi
    
    if [ -z "$container_name" ]; then
        # N·∫øu v·∫´n kh√¥ng t√¨m th·∫•y, l·∫•y container ƒë·∫ßu ti√™n ƒëang ch·∫°y
        container_name=$(docker ps --format "{{.Names}}" | head -1)
    fi
    
    echo "$container_name"
}

# H√†m hi·ªÉn th·ªã help
show_help() {
    echo -e "${YELLOW}Script ƒëi·ªÅu khi·ªÉn ch·ª©c nƒÉng ·ª©ng d·ª•ng (T·ª± ƒë·ªông Docker)${NC}"
    echo ""
    echo "C√°ch s·ª≠ d·ª•ng:"
    echo "  $0 [feature] [on/off]"
    echo ""
    echo "Features c√≥ s·∫µn:"
    echo "  registration - Ch·ª©c nƒÉng ƒëƒÉng k√Ω"
    echo "  login       - Ch·ª©c nƒÉng ƒëƒÉng nh·∫≠p"
    echo "  guest       - Ch·∫ø ƒë·ªô kh√°ch"
    echo ""
    echo "V√≠ d·ª•:"
    echo "  $0 registration off    # T·∫Øt ch·ª©c nƒÉng ƒëƒÉng k√Ω"
    echo "  $0 registration on     # B·∫≠t ch·ª©c nƒÉng ƒëƒÉng k√Ω"
    echo "  $0 login off           # T·∫Øt ch·ª©c nƒÉng ƒëƒÉng nh·∫≠p"
    echo ""
    echo "ƒê·ªÉ xem tr·∫°ng th√°i hi·ªán t·∫°i:"
    echo "  $0 status"
    echo ""
    echo "ƒê·ªÉ ki·ªÉm tra tr·∫°ng th√°i Docker:"
    echo "  $0 docker-status"
}

# H√†m ki·ªÉm tra file c·∫•u h√¨nh
check_config_file() {
    if [ ! -f "$FEATURES_FILE" ]; then
        echo -e "${RED}‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y file $FEATURES_FILE${NC}"
        exit 1
    fi
}

# H√†m ki·ªÉm tra Docker container
check_docker_container() {
    local container_name=$(find_container_name)
    
    if [ -z "$container_name" ]; then
        echo -e "${RED}‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y Docker container n√†o ƒëang ch·∫°y${NC}" >&2
        echo -e "${YELLOW}H√£y kh·ªüi ƒë·ªông Docker container tr∆∞·ªõc:${NC}" >&2
        echo "  docker-compose up -d" >&2
        exit 1
    fi
    
    echo -e "${BLUE}üîç T√¨m th·∫•y container: ${GREEN}$container_name${NC}" >&2
    echo "$container_name"
}

# H√†m hi·ªÉn th·ªã tr·∫°ng th√°i
show_status() {
    echo -e "${YELLOW}Tr·∫°ng th√°i c√°c ch·ª©c nƒÉng:${NC}"
    echo ""
    
    # ƒê·ªçc tr·∫°ng th√°i t·ª´ file m·ªôt c√°ch ch√≠nh x√°c h∆°n
    REG_STATUS=$(grep "^  enableRegistration:" "$FEATURES_FILE" | grep -o "true\|false" | head -1)
    LOGIN_STATUS=$(grep "^  enableLogin:" "$FEATURES_FILE" | grep -o "true\|false" | head -1)
    GUEST_STATUS=$(grep "^  enableGuestMode:" "$FEATURES_FILE" | grep -o "true\|false" | head -1)
    
    echo -e "ƒêƒÉng k√Ω:     ${GREEN}$REG_STATUS${NC}"
    echo -e "ƒêƒÉng nh·∫≠p:   ${GREEN}$LOGIN_STATUS${NC}"
    echo -e "Ch·∫ø ƒë·ªô kh√°ch: ${GREEN}$GUEST_STATUS${NC}"
    echo ""
}

# H√†m hi·ªÉn th·ªã tr·∫°ng th√°i Docker
show_docker_status() {
    local container_name=$(find_container_name)
    
    echo -e "${BLUE}Tr·∫°ng th√°i Docker container:${NC}"
    echo ""
    
    if [ -n "$container_name" ]; then
        echo -e "Container:   ${GREEN}$container_name ƒëang ch·∫°y${NC}"
        
        # Ki·ªÉm tra API
        echo -e "API Status:  ${YELLOW}ƒêang ki·ªÉm tra...${NC}"
        if command -v curl &> /dev/null; then
            API_RESPONSE=$(curl -s http://localhost:2701/api/features/registration-status 2>/dev/null)
            if [ $? -eq 0 ]; then
                echo -e "API Response: ${GREEN}$API_RESPONSE${NC}"
            else
                echo -e "API Response: ${RED}Kh√¥ng th·ªÉ k·∫øt n·ªëi${NC}"
            fi
        else
            echo -e "API Response: ${YELLOW}curl kh√¥ng c√≥ s·∫µn ƒë·ªÉ test${NC}"
        fi
    else
        echo -e "Container:   ${RED}Kh√¥ng t√¨m th·∫•y container n√†o${NC}"
    fi
    echo ""
}

# H√†m copy file v√† restart container
apply_changes() {
    local feature=$1
    local action=$2
    local container_name=$3
    
    echo -e "${BLUE}üîÑ ƒêang √°p d·ª•ng thay ƒë·ªïi...${NC}"
    
    # Copy file v√†o container
    echo -e "${YELLOW}üìÅ Copy file c·∫•u h√¨nh v√†o container $container_name...${NC}"
    if docker cp "$FEATURES_FILE" "$container_name:/app/$FEATURES_FILE"; then
        echo -e "${GREEN}‚úÖ Copy file th√†nh c√¥ng${NC}"
    else
        echo -e "${RED}‚ùå L·ªói khi copy file${NC}"
        return 1
    fi
    
    # Restart container
    echo -e "${YELLOW}üîÑ Restart container $container_name...${NC}"
    if docker restart "$container_name"; then
        echo -e "${GREEN}‚úÖ Restart container th√†nh c√¥ng${NC}"
    else
        echo -e "${RED}‚ùå L·ªói khi restart container${NC}"
        return 1
    fi
    
    # ƒê·ª£i container kh·ªüi ƒë·ªông
    echo -e "${YELLOW}‚è≥ ƒê·ª£i container kh·ªüi ƒë·ªông...${NC}"
    sleep 8
    
    # Ki·ªÉm tra tr·∫°ng th√°i
    echo -e "${YELLOW}üîç Ki·ªÉm tra tr·∫°ng th√°i...${NC}"
    if command -v curl &> /dev/null; then
        local max_attempts=5
        local attempt=1
        
        while [ $attempt -le $max_attempts ]; do
            echo -e "${YELLOW}   L·∫ßn th·ª≠ $attempt/$max_attempts...${NC}"
            
            if API_RESPONSE=$(curl -s http://localhost:2701/api/features/registration-status 2>/dev/null); then
                echo -e "${GREEN}‚úÖ API ho·∫°t ƒë·ªông: $API_RESPONSE${NC}"
                break
            else
                echo -e "${YELLOW}   Ch∆∞a s·∫µn s√†ng, ƒë·ª£i th√™m...${NC}"
                sleep 3
                attempt=$((attempt + 1))
            fi
        done
        
        if [ $attempt -gt $max_attempts ]; then
            echo -e "${RED}‚ö†Ô∏è  Container c√≥ th·ªÉ ch∆∞a s·∫µn s√†ng ho√†n to√†n${NC}"
        fi
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Kh√¥ng th·ªÉ test API (curl kh√¥ng c√≥ s·∫µn)${NC}"
    fi
    
    echo -e "${GREEN}üéâ Ho√†n t·∫•t! Ch·ª©c nƒÉng $feature ƒë√£ ƒë∆∞·ª£c $action${NC}"
}

# H√†m thay ƒë·ªïi tr·∫°ng th√°i
toggle_feature() {
    local feature=$1
    local action=$2
    local container_name=$3
    
    case $feature in
        "registration")
            if [ "$action" = "on" ]; then
                # T∆∞∆°ng th√≠ch v·ªõi c·∫£ macOS v√† Linux
                if [[ "$OSTYPE" == "darwin"* ]]; then
                    # macOS
                    sed -i '' 's/enableRegistration: false/enableRegistration: true/' "$FEATURES_FILE"
                else
                    # Linux
                    sed -i 's/enableRegistration: false/enableRegistration: true/' "$FEATURES_FILE"
                fi
                echo -e "${GREEN}‚úÖ ƒê√£ b·∫≠t ch·ª©c nƒÉng ƒëƒÉng k√Ω${NC}"
            elif [ "$action" = "off" ]; then
                # T∆∞∆°ng th√≠ch v·ªõi c·∫£ macOS v√† Linux
                if [[ "$OSTYPE" == "darwin"* ]]; then
                    # macOS
                    sed -i '' 's/enableRegistration: true/enableRegistration: false/' "$FEATURES_FILE"
                else
                    # Linux
                    sed -i 's/enableRegistration: true/enableRegistration: false/' "$FEATURES_FILE"
                fi
                echo -e "${RED}‚úÖ ƒê√£ t·∫Øt ch·ª©c nƒÉng ƒëƒÉng k√Ω${NC}"
            fi
            ;;
        "login")
            if [ "$action" = "on" ]; then
                # T∆∞∆°ng th√≠ch v·ªõi c·∫£ macOS v√† Linux
                if [[ "$OSTYPE" == "darwin"* ]]; then
                    # macOS
                    sed -i '' 's/enableLogin: false/enableLogin: true/' "$FEATURES_FILE"
                else
                    # Linux
                    sed -i 's/enableLogin: false/enableLogin: true/' "$FEATURES_FILE"
                fi
                echo -e "${GREEN}‚úÖ ƒê√£ b·∫≠t ch·ª©c nƒÉng ƒëƒÉng nh·∫≠p${NC}"
            elif [ "$action" = "off" ]; then
                # T∆∞∆°ng th√≠ch v·ªõi c·∫£ macOS v√† Linux
                if [[ "$OSTYPE" == "darwin"* ]]; then
                    # macOS
                    sed -i '' 's/enableLogin: true/enableLogin: false/' "$FEATURES_FILE"
                else
                    # Linux
                    sed -i 's/enableLogin: true/enableLogin: false/' "$FEATURES_FILE"
                fi
                echo -e "${RED}‚úÖ ƒê√£ t·∫Øt ch·ª©c nƒÉng ƒëƒÉng nh·∫≠p${NC}"
            fi
            ;;
        "guest")
            if [ "$action" = "on" ]; then
                # T∆∞∆°ng th√≠ch v·ªõi c·∫£ macOS v√† Linux
                if [[ "$OSTYPE" == "darwin"* ]]; then
                    # macOS
                    sed -i '' 's/enableGuestMode: false/enableGuestMode: true/' "$FEATURES_FILE"
                else
                    # Linux
                    sed -i 's/enableGuestMode: false/enableGuestMode: true/' "$FEATURES_FILE"
                fi
                echo -e "${GREEN}‚úÖ ƒê√£ b·∫≠t ch·∫ø ƒë·ªô kh√°ch${NC}"
            elif [ "$action" = "off" ]; then
                # T∆∞∆°ng th√≠ch v·ªõi c·∫£ macOS v√† Linux
                if [[ "$OSTYPE" == "darwin"* ]]; then
                    # macOS
                    sed -i '' 's/enableGuestMode: true/enableGuestMode: false/' "$FEATURES_FILE"
                else
                    # Linux
                    sed -i 's/enableGuestMode: true/enableGuestMode: false/' "$FEATURES_FILE"
                fi
                echo -e "${RED}‚úÖ ƒê√£ t·∫Øt ch·∫ø ƒë·ªô kh√°ch${NC}"
            fi
            ;;
        *)
            echo -e "${RED}‚ùå L·ªói: Feature '$feature' kh√¥ng h·ª£p l·ªá${NC}"
            show_help
            exit 1
            ;;
    esac
    
    # T·ª± ƒë·ªông √°p d·ª•ng thay ƒë·ªïi
    apply_changes "$feature" "$action" "$container_name"
}

# Main script
check_config_file

if [ $# -eq 0 ]; then
    show_help
    exit 0
fi

if [ "$1" = "status" ]; then
    show_status
    exit 0
fi

if [ "$1" = "docker-status" ]; then
    show_docker_status
    exit 0
fi

if [ $# -ne 2 ]; then
    echo -e "${RED}‚ùå L·ªói: C·∫ßn ƒë√∫ng 2 tham s·ªë${NC}"
    show_help
    exit 1
fi

if [ "$2" != "on" ] && [ "$2" != "off" ]; then
    echo -e "${RED}‚ùå L·ªói: Action ph·∫£i l√† 'on' ho·∫∑c 'off'${NC}"
    show_help
    exit 1
fi

# Ki·ªÉm tra Docker container tr∆∞·ªõc khi th·ª±c hi·ªán
echo -e "${BLUE}üîç ƒêang t√¨m Docker container...${NC}"
CONTAINER_NAME=$(check_docker_container)

echo -e "${BLUE}üöÄ B·∫Øt ƒë·∫ßu thay ƒë·ªïi ch·ª©c nƒÉng: $1 -> $2${NC}"
echo ""

toggle_feature "$1" "$2" "$CONTAINER_NAME"
