document.addEventListener('DOMContentLoaded', function() {
    // Get elements
    const soloBattleRoom = document.getElementById('solo-battle-room');
    const resultRoom = document.getElementById('result-room');
    const currentQuestionEl = document.getElementById('current-question');
    const totalQuestionsEl = document.getElementById('total-questions');
    // Removed timerEl since we only use total timer now
    const totalTimerEl = document.getElementById('total-timer');
    const questionTextEl = document.getElementById('question-text');
    const progressBarEl = document.getElementById('progress-bar');
    const finalScoreEl = document.getElementById('final-score');
    const maxScoreEl = document.getElementById('max-score');
    const questionReviewListEl = document.getElementById('question-review-list');
    const playAgainBtn = document.getElementById('play-again-btn');
    const userScoreEl = document.getElementById('user-score');
    
    // Audio element for battle sound
    const battleSound = document.getElementById('battle-sound');
    const soundToggleBtn = document.getElementById('sound-toggle');
    const soundIcon = document.getElementById('sound-icon');
    
    // Bi·∫øn ƒë·ªÉ theo d√µi tr·∫°ng th√°i √¢m thanh
    let soundEnabled = true;
    
    // H√†m ƒë·ªÉ ki·ªÉm tra v√† chu·∫©n b·ªã √¢m thanh
    function prepareBattleSound() {
        if (battleSound) {
            // ƒê·∫∑t √¢m l∆∞·ª£ng m·∫∑c ƒë·ªãnh
            battleSound.volume = 0.7;
            // Preload √¢m thanh
            battleSound.load();
        }
    }
    
    // H√†m ƒë·ªÉ b·∫≠t/t·∫Øt √¢m thanh
    function toggleSound() {
        soundEnabled = !soundEnabled;
        if (soundEnabled) {
            soundIcon.textContent = 'üîä';
            if (battleSound) {
                battleSound.volume = 0.7;
            }
        } else {
            soundIcon.textContent = 'üîá';
            if (battleSound) {
                battleSound.volume = 0;
            }
        }
    }
    
    // Event listener cho n√∫t b·∫≠t/t·∫Øt √¢m thanh
    if (soundToggleBtn) {
        soundToggleBtn.addEventListener('click', toggleSound);
    }
    
    // Chu·∫©n b·ªã √¢m thanh khi trang load
    prepareBattleSound();
    
    // Bi·∫øn l∆∞u th√¥ng tin ng∆∞·ªùi d√πng
    let userId;
    
    // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng t·ª´ session
    fetch('/api/user')
        .then(response => response.json())
        .then(data => {
            if (data.username) {
                document.getElementById('username-display').textContent = `${data.username}`;
                userId = data.id;
            } else {
                window.location.href = '/login';
            }
        })
        .catch(error => {
            console.error('L·ªói khi l·∫•y th√¥ng tin ng∆∞·ªùi d√πng:', error);
            window.location.href = '/login';
        });
    
    // Bi·∫øn ƒë·ªÉ l∆∞u tr·ªØ d·ªØ li·ªáu tr√≤ ch∆°i
    let currentQuestionIndex = 0;
    let playerScore = 0;
    let timerInterval;
    let userAnswers = [];
    let questionStartTime;
    let questions = [];
    let totalTimeRemaining = 60; // T·ªïng th·ªùi gian 60 gi√¢y cho 12 c√¢u h·ªèi
    
    // L·∫•y c√¢u h·ªèi t·ª´ server
    fetch('/admin/api/questions/random?count=12')
        .then(response => {
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            return response.json();
        })
        .then(data => {
            if (!data || !Array.isArray(data) || data.length === 0) {
                throw new Error('Kh√¥ng c√≥ c√¢u h·ªèi n√†o trong database');
            }
            
            questions = data;
            
            // Thi·∫øt l·∫≠p t·ªïng s·ªë c√¢u h·ªèi
            totalQuestionsEl.textContent = questions.length;
            maxScoreEl.textContent = questions.length * 10; // M·ªói c√¢u 10 ƒëi·ªÉm
            
            // B·∫Øt ƒë·∫ßu v·ªõi c√¢u h·ªèi ƒë·∫ßu ti√™n
            showQuestion(currentQuestionIndex);
        })
        .catch(error => {
            console.error('L·ªói khi l·∫•y c√¢u h·ªèi:', error);
            // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói cho ng∆∞·ªùi d√πng
            questionTextEl.textContent = `L·ªói: Kh√¥ng th·ªÉ t·∫£i c√¢u h·ªèi t·ª´ database. ${error.message}`;
            alert('Kh√¥ng th·ªÉ t·∫£i c√¢u h·ªèi. Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c li√™n h·ªá admin.');
        });
    

    
    // Th√™m event listener cho n√∫t submit answer
    document.getElementById('submit-answer').addEventListener('click', function() {
        submitAnswer();
    });
    
    // Th√™m event listener cho ph√≠m Enter trong input
    document.getElementById('answer-input').addEventListener('keypress', function(event) {
        if (event.key === 'Enter') {
            submitAnswer();
        }
    });
    
    // Ch∆°i l·∫°i
    playAgainBtn.addEventListener('click', function() {
        // D·ª´ng nh·∫°c n·∫øu ƒëang ph√°t
        if (battleSound) {
            battleSound.pause();
            battleSound.currentTime = 0;
        }
        
        // Reset tr·∫°ng th√°i tr√≤ ch∆°i
        currentQuestionIndex = 0;
        playerScore = 0;
        userAnswers = [];
        totalTimeRemaining = 60; // Kh√¥i ph·ª•c th·ªùi gian t·ªïng
        
        // Reset giao di·ªán
        soloBattleRoom.style.display = 'block';
        resultRoom.style.display = 'none';
        userScoreEl.textContent = '0';
        
        // B·∫Øt ƒë·∫ßu v·ªõi c√¢u h·ªèi ƒë·∫ßu ti√™n
        showQuestion(currentQuestionIndex);
    });
    
    // Hi·ªÉn th·ªã c√¢u h·ªèi
    function showQuestion(index) {
        if (index >= questions.length) {
            // H·∫øt c√¢u h·ªèi, hi·ªÉn th·ªã k·∫øt qu·∫£
            showResults();
            return;
        }
        
        const question = questions[index];
        questionStartTime = Date.now();
        
        // C·∫≠p nh·∫≠t s·ªë c√¢u h·ªèi
        currentQuestionEl.textContent = index + 1;
        
        // ƒê·∫∑t n·ªôi dung c√¢u h·ªèi
        questionTextEl.textContent = question.text;
        
        // Reset input v√† n√∫t tr·∫£ l·ªùi
        const answerInput = document.getElementById('answer-input');
        answerInput.value = '';
        answerInput.disabled = false;
        document.getElementById('submit-answer').disabled = false;
        
        // X√≥a k·∫øt qu·∫£ c√¢u tr·∫£ l·ªùi tr∆∞·ªõc ƒë√≥
        const answerResult = document.getElementById('answer-result');
        answerResult.textContent = '';
        answerResult.className = 'answer-result';
        
        // C·∫≠p nh·∫≠t thanh ti·∫øn tr√¨nh
        const progress = (index / questions.length) * 100;
        progressBarEl.style.width = `${progress}%`;
        
        // Ch·ªâ b·∫Øt ƒë·∫ßu ƒë·∫øm gi·ªù t·ªïng ·ªü c√¢u h·ªèi ƒë·∫ßu ti√™n
        if (index === 0) {
            startTimer();
        }
        
        // Focus v√†o input ƒë·ªÉ ng∆∞·ªùi d√πng c√≥ th·ªÉ nh·∫≠p ngay
        answerInput.focus();
    }
    
    // Tr·∫£ l·ªùi c√¢u h·ªèi
    function submitAnswer() {
        if (currentQuestionIndex >= questions.length) return;
        
        const answerInput = document.getElementById('answer-input');
        const userAnswer = answerInput.value.trim();
        
        if (!userAnswer) {
            alert('Vui l√≤ng nh·∫≠p c√¢u tr·∫£ l·ªùi!');
            return;
        }
        
        // V√¥ hi·ªáu h√≥a input v√† n√∫t tr·∫£ l·ªùi
        answerInput.disabled = true;
        document.getElementById('submit-answer').disabled = true;
        
        // T√≠nh th·ªùi gian tr·∫£ l·ªùi (gi√¢y)
        const answerTime = Math.floor((Date.now() - questionStartTime) / 1000);
        
        const question = questions[currentQuestionIndex];
        
        // Ki·ªÉm tra ƒë√°p √°n
        const isCorrect = checkAnswer(userAnswer, question.answer);
        
        const answerResult = document.getElementById('answer-result');
        
        // C·∫≠p nh·∫≠t ƒëi·ªÉm s·ªë - m·ªói c√¢u ƒë√∫ng ƒë∆∞·ª£c 10 ƒëi·ªÉm
        if (isCorrect) {
            playerScore += 10;
            userScoreEl.textContent = playerScore;
            
            answerResult.textContent = 'ƒê√∫ng! +10 ƒëi·ªÉm';
            answerResult.className = 'answer-result correct';
        } else {
            answerResult.textContent = `Sai! ƒê√°p √°n ƒë√∫ng: ${question.answer}`;
            answerResult.className = 'answer-result incorrect';
        }
        
        // L∆∞u c√¢u tr·∫£ l·ªùi
        userAnswers.push({
            questionId: question.id,
            questionText: question.text,
            userAnswer: userAnswer,
            correctAnswer: question.answer,
            isCorrect: isCorrect
        });
        
        // Ch·ªù tr∆∞·ªõc khi chuy·ªÉn sang c√¢u h·ªèi ti·∫øp theo
        setTimeout(() => {
            currentQuestionIndex++;
            showQuestion(currentQuestionIndex);
        }, 2000);
    }
    
    // Ki·ªÉm tra c√¢u tr·∫£ l·ªùi
    function checkAnswer(userAnswer, correctAnswer) {
        // Chu·∫©n h√≥a c·∫£ hai c√¢u tr·∫£ l·ªùi: lo·∫°i b·ªè d·∫•u c√°ch th·ª´a, chuy·ªÉn v·ªÅ ch·ªØ th∆∞·ªùng
        const normalizedUserAnswer = userAnswer.trim().toLowerCase();
        const normalizedCorrectAnswer = correctAnswer.trim().toLowerCase();
        
        // So s√°nh tr·ª±c ti·∫øp
        if (normalizedUserAnswer === normalizedCorrectAnswer) {
            return true;
        }
        
        // Ki·ªÉm tra n·∫øu c√¢u tr·∫£ l·ªùi c·ªßa ng∆∞·ªùi d√πng l√† m·ªôt ph·∫ßn c·ªßa ƒë√°p √°n ƒë√∫ng
        // H·ªØu √≠ch cho c√°c c√¢u tr·∫£ l·ªùi c√≥ nhi·ªÅu c√°ch di·ªÖn ƒë·∫°t
        if (normalizedCorrectAnswer.includes(normalizedUserAnswer) && 
            normalizedUserAnswer.length > normalizedCorrectAnswer.length / 2) {
            return true;
        }
        
        return false;
    }
    
    // X·ª≠ l√Ω khi h·∫øt th·ªùi gian t·ªïng (60 gi√¢y)
    function handleGameTimeout() {
        // D·ª´ng tr√≤ ch∆°i ngay l·∫≠p t·ª©c v√† hi·ªÉn th·ªã k·∫øt qu·∫£
        clearInterval(timerInterval);
        
        // D·ª´ng nh·∫°c khi h·∫øt th·ªùi gian
        if (battleSound) {
            battleSound.pause();
            battleSound.currentTime = 0;
        }
        
        // L∆∞u t·∫•t c·∫£ c√¢u h·ªèi c√≤n l·∫°i nh∆∞ kh√¥ng tr·∫£ l·ªùi
        for (let i = currentQuestionIndex; i < questions.length; i++) {
            const question = questions[i];
            userAnswers.push({
                questionId: question.id,
                questionText: question.text,
                userAnswer: null,
                correctAnswer: question.answer,
                isCorrect: false
            });
        }
        
        // Hi·ªÉn th·ªã k·∫øt qu·∫£
        showResults();
    }
    
    // B·∫Øt ƒë·∫ßu ƒë·∫øm gi·ªù t·ªïng cho t·∫•t c·∫£ c√¢u h·ªèi
    function startTimer() {
        totalTimerEl.textContent = totalTimeRemaining;
        
        clearInterval(timerInterval);
        
        // Ph√°t nh·∫°c khi b·∫Øt ƒë·∫ßu tr·∫≠n ƒë·∫•u
        if (battleSound && soundEnabled) {
            battleSound.currentTime = 0; // Reset v·ªÅ ƒë·∫ßu
            battleSound.volume = 0.7; // ƒê·∫∑t √¢m l∆∞·ª£ng 70%
            battleSound.loop = true; // L·∫∑p l·∫°i ƒë·ªÉ ph√°t trong 60 gi√¢y
            battleSound.play().catch(error => {
                console.log('Kh√¥ng th·ªÉ ph√°t nh·∫°c:', error);
            });
        }
        
        timerInterval = setInterval(() => {
            totalTimeRemaining--;
            totalTimerEl.textContent = totalTimeRemaining;
            
            // ƒê·ªïi m√†u th·ªùi gian t·ªïng khi c√≤n √≠t
            if (totalTimeRemaining <= 10) {
                totalTimerEl.style.color = '#e74c3c';
            } else {
                totalTimerEl.style.color = '';
            }
            
            // K·∫øt th√∫c tr√≤ ch∆°i khi h·∫øt th·ªùi gian t·ªïng
            if (totalTimeRemaining <= 0) {
                clearInterval(timerInterval);
                handleGameTimeout();
            }
        }, 1000);
    }
    
    // Hi·ªÉn th·ªã k·∫øt qu·∫£ cu·ªëi c√πng
    function showResults() {
        soloBattleRoom.style.display = 'none';
        resultRoom.style.display = 'block';
        
        // D·ª´ng ƒë·∫øm gi·ªù
        clearInterval(timerInterval);
        
        // D·ª´ng nh·∫°c khi k·∫øt th√∫c tr·∫≠n ƒë·∫•u
        if (battleSound) {
            battleSound.pause();
            battleSound.currentTime = 0;
        }
        
        // C·∫≠p nh·∫≠t ƒëi·ªÉm s·ªë
        finalScoreEl.textContent = playerScore;
        
        // ƒê·∫øm s·ªë c√¢u tr·∫£ l·ªùi ƒë√∫ng
        let correctAnswersCount = userAnswers.filter(answer => answer.isCorrect).length;
        
        // L∆∞u k·∫øt qu·∫£ tr·∫≠n ƒë·∫•u v√†o server
        saveSoloGameResult(playerScore, correctAnswersCount);
        
        // T·∫°o danh s√°ch xem l·∫°i c√¢u h·ªèi
        questionReviewListEl.innerHTML = '';
        userAnswers.forEach((answer, index) => {
            const div = document.createElement('div');
            div.className = `question-review-item ${answer.isCorrect ? 'correct' : 'incorrect'}`;
            
            let answerText = 'Kh√¥ng tr·∫£ l·ªùi';
            if (answer.userAnswer !== null) {
                answerText = answer.userAnswer;
            }
            
            div.innerHTML = `
                <h4>C√¢u ${index + 1}: ${answer.questionText}</h4>
                <p>C√¢u tr·∫£ l·ªùi c·ªßa b·∫°n: ${answerText}</p>
                <p>C√¢u tr·∫£ l·ªùi ƒë√∫ng: ${answer.correctAnswer}</p>
                <p>ƒêi·ªÉm: ${answer.isCorrect ? '10' : '0'}</p>
            `;
            
            questionReviewListEl.appendChild(div);
        });
    }
    
    // L∆∞u k·∫øt qu·∫£ tr·∫≠n ƒë·∫•u solo v√†o server
    async function saveSoloGameResult(score, correctAnswers) {
        try {
            const response = await fetch('/api/solo-game/finish', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    userId: userId,
                    score: score,
                    correctAnswers: correctAnswers,
                    totalQuestions: questions.length
                })
            });
            
            if (!response.ok) {
                throw new Error('Kh√¥ng th·ªÉ l∆∞u k·∫øt qu·∫£ tr·∫≠n ƒë·∫•u');
            }
            
            console.log('ƒê√£ l∆∞u k·∫øt qu·∫£ tr·∫≠n ƒë·∫•u th√†nh c√¥ng');
        } catch (error) {
            console.error('L·ªói khi l∆∞u k·∫øt qu·∫£ tr·∫≠n ƒë·∫•u:', error);
        }
    }
});