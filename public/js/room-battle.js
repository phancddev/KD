document.addEventListener('DOMContentLoaded', function() {
    // Get elements
    const waitingRoom = document.getElementById('waiting-room');
    const battleRoom = document.getElementById('battle-room');
    const resultRoom = document.getElementById('result-room');
    const startBattleBtn = document.getElementById('start-battle-btn');
    const participantsList = document.getElementById('participants-list');
    const roomNameDisplay = document.getElementById('room-name-display');
    const roomCodeDisplay = document.getElementById('room-code-display');
    const currentQuestionEl = document.getElementById('current-question');
    const totalQuestionsEl = document.getElementById('total-questions');
    // Removed timerEl since we only use total timer now
    const questionTextEl = document.getElementById('question-text');
    const answerOptionsEl = document.getElementById('answer-options');
    const participantsStatusEl = document.getElementById('participants-status');
    const resultTableBodyEl = document.getElementById('result-table-body');
    const playAgainBtn = document.getElementById('play-again-btn');
    const endRoomBtn = document.getElementById('end-room-btn');
    const endGameBtn = document.getElementById('end-game-btn');
    
    // Kh·ªüi t·∫°o bi·∫øn
    let socket;
    let userId;
    let username;
    let roomInfo;
    let currentQuestionIndex = 0;
    let playerScore = 0;
    let timerInterval;
    let currentQuestion = null;
    let questionStartTime;
    let allQuestions = []; // L∆∞u t·∫•t c·∫£ c√¢u h·ªèi
    let myQuestionOrder = []; // Th·ª© t·ª± c√¢u h·ªèi c·ªßa t√¥i
    let gameStartTime; // Th·ªùi gian b·∫Øt ƒë·∫ßu game
    let totalTimeRemaining = 60; // 60 gi√¢y t·ªïng
    let gameFinished = false;
    
    // K·∫øt n·ªëi Socket.IO
    function connectSocket() {
        socket = io();
        
        // X·ª≠ l√Ω s·ª± ki·ªán khi ng∆∞·ªùi tham gia m·ªõi v√†o ph√≤ng
        socket.on('participant_joined', function(data) {
            renderParticipants(data.participants);
        });
        
        // X·ª≠ l√Ω s·ª± ki·ªán khi ng∆∞·ªùi tham gia ng·∫Øt k·∫øt n·ªëi
        socket.on('participant_disconnected', function(data) {
            showNotification(`${data.username} ƒë√£ ng·∫Øt k·∫øt n·ªëi.`);
        });
        
        // X·ª≠ l√Ω s·ª± ki·ªán khi tr√≤ ch∆°i s·∫Øp b·∫Øt ƒë·∫ßu
        socket.on('game_starting', function(data) {
            showCountdown(data.countDown);
        });
        
        // X·ª≠ l√Ω s·ª± ki·ªán khi c√≥ c√¢u h·ªèi m·ªõi (approach m·ªõi)
        socket.on('new_question_start', function(data) {
            console.log('üì® Nh·∫≠n event new_question_start:', data);
            handleNewQuestionStart(data);
        });
        
        // X·ª≠ l√Ω s·ª± ki·ªán c·∫≠p nh·∫≠t timer
        socket.on('timer_update', function(data) {
            console.log('‚è∞ Timer update:', data.totalTimeLeft);
            updateTimer(data.totalTimeLeft);
        });
        
                // X·ª≠ l√Ω s·ª± ki·ªán khi c√≥ ng∆∞·ªùi tr·∫£ l·ªùi  
        socket.on('participant_answered', function(data) {
            updateParticipantStatus(data);
        });
        
        // X·ª≠ l√Ω khi c√≥ ng∆∞·ªùi ho√†n th√†nh game
        socket.on('player_finished', function(data) {
            console.log('üèÅ Ng∆∞·ªùi ch∆°i ho√†n th√†nh:', data);
            showNotification(`${data.username} ƒë√£ ho√†n th√†nh! ƒêi·ªÉm: ${data.score}`, 'info');
        });
        
        // X·ª≠ l√Ω k·∫øt qu·∫£ cu·ªëi c√πng
        socket.on('game_results', function(data) {
            console.log('üéØ K·∫øt qu·∫£ cu·ªëi c√πng:', data);
            showResults(data.results);
        });
        
        // X·ª≠ l√Ω s·ª± ki·ªán khi h·∫øt th·ªùi gian c√¢u h·ªèi
        socket.on('question_timeout', function() {
            handleQuestionTimeout();
        });
        
        // X·ª≠ l√Ω s·ª± ki·ªán khi tr√≤ ch∆°i k·∫øt th√∫c
        socket.on('game_over', function(data) {
            showResults(data.results);
        });
        
        // X·ª≠ l√Ω s·ª± ki·ªán khi ph√≤ng b·ªã k·∫øt th√∫c
        socket.on('room_ended', function(data) {
            alert(data.message);
            window.location.href = '/';
        });
    }
    
    // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng t·ª´ session v·ªõi retry logic
    function fetchUserInfo(retryCount = 0) {
        console.log('üîç ƒêang l·∫•y th√¥ng tin user, attempt:', retryCount + 1);
        
        fetch('/api/user', {
            credentials: 'include', // ƒê·∫£m b·∫£o cookies ƒë∆∞·ª£c g·ª≠i
            headers: {
                'Cache-Control': 'no-cache'
            }
        })
        .then(response => {
            console.log('üì° User API response status:', response.status);
            return response.json();
        })
        .then(data => {
            console.log('üë§ User data received:', data);
            
            if (data.id && data.username) {
                userId = data.id;
                username = data.username;
                document.getElementById('username-display').textContent = username;
                
                // L∆∞u user info v√†o localStorage ƒë·ªÉ backup
                localStorage.setItem('userInfo', JSON.stringify({
                    id: userId,
                    username: username,
                    timestamp: Date.now()
                }));
                
                // Sau khi c√≥ th√¥ng tin ng∆∞·ªùi d√πng, k·∫øt n·ªëi Socket.IO
                connectSocket();
                
                // Ki·ªÉm tra th√¥ng tin ph√≤ng t·ª´ localStorage
                checkRoomInfo();
            } else {
                handleAuthFailure(retryCount);
            }
        })
        .catch(error => {
            console.error('‚ùå L·ªói khi l·∫•y th√¥ng tin ng∆∞·ªùi d√πng:', error);
            handleAuthFailure(retryCount);
        });
    }
    
    // X·ª≠ l√Ω khi authentication th·∫•t b·∫°i
    function handleAuthFailure(retryCount) {
        // Th·ª≠ backup t·ª´ localStorage
        const storedUserInfo = localStorage.getItem('userInfo');
        if (storedUserInfo && retryCount < 2) {
            try {
                const userInfo = JSON.parse(storedUserInfo);
                const timeElapsed = Date.now() - userInfo.timestamp;
                
                // N·∫øu th√¥ng tin c√≤n m·ªõi (d∆∞·ªõi 1 gi·ªù), th·ª≠ retry
                if (timeElapsed < 60 * 60 * 1000) {
                    console.log('üîÑ Th·ª≠ retry v·ªõi backup info...');
                    setTimeout(() => fetchUserInfo(retryCount + 1), 1000);
                    return;
                }
            } catch (e) {
                console.log('‚ùå Backup user info kh√¥ng h·ª£p l·ªá');
            }
        }
        
        // X√≥a localStorage v√† chuy·ªÉn v·ªÅ login
        localStorage.removeItem('userInfo');
        localStorage.removeItem('currentRoom');
        alert('Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.');
        window.location.href = '/login';
    }
    
    // G·ªçi function l·∫•y th√¥ng tin user
    fetchUserInfo();
    
    // Ki·ªÉm tra th√¥ng tin ph√≤ng t·ª´ localStorage
    function checkRoomInfo() {
        roomInfo = JSON.parse(localStorage.getItem('currentRoom') || '{}');
        
        if (!roomInfo.code) {
            // Kh√¥ng c√≥ th√¥ng tin ph√≤ng, chuy·ªÉn v·ªÅ trang ch·ªß
            window.location.href = '/';
            return;
        }
        
        // Hi·ªÉn th·ªã th√¥ng tin ph√≤ng
        roomCodeDisplay.textContent = roomInfo.code;
        roomNameDisplay.textContent = roomInfo.name || 'Ph√≤ng thi ƒë·∫•u';
        
        // Ch·ªâ hi·ªÉn th·ªã n√∫t b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c cho ng∆∞·ªùi t·∫°o ph√≤ng
        const isCreator = roomInfo.creator;
        startBattleBtn.style.display = isCreator ? 'block' : 'none';
        if (endRoomBtn) endRoomBtn.style.display = isCreator ? 'block' : 'none';
        
        // Tham gia ph√≤ng qua Socket.IO
        joinRoom();
    }
    
    // Tham gia ph√≤ng
    function joinRoom() {
        if (!socket || !roomInfo.code) return;
        
        socket.emit('join_room', {
            userId: userId,
            username: username,
            roomCode: roomInfo.code
        }, function(response) {
            if (response.success) {
                // C·∫≠p nh·∫≠t th√¥ng tin ph√≤ng
                roomInfo = response.room;
                
                // Hi·ªÉn th·ªã danh s√°ch ng∆∞·ªùi tham gia
                renderParticipants(response.room.participants);
            } else {
                // X·ª≠ l√Ω l·ªói
                alert('Kh√¥ng th·ªÉ tham gia ph√≤ng: ' + response.error);
                window.location.href = '/';
            }
        });
    }
    
    // Hi·ªÉn th·ªã danh s√°ch ng∆∞·ªùi tham gia
    function renderParticipants(participants) {
        if (!participants) return;
        
        participantsList.innerHTML = '';
        participants.forEach(participant => {
            const li = document.createElement('li');
            li.textContent = participant.username + (participant.isCreator ? ' (Ch·ªß ph√≤ng)' : '');
            participantsList.appendChild(li);
        });
    }
    
    // N√∫t b·∫Øt ƒë·∫ßu tr√≤ ch∆°i
    startBattleBtn.addEventListener('click', function() {
        startBattle();
    });
    
    // N√∫t ch∆°i l·∫°i
    playAgainBtn.addEventListener('click', function() {
        // Quay l·∫°i trang ch·ªß
        window.location.href = '/';
    });
    
    // N√∫t k·∫øt th√∫c ph√≤ng (trong waiting room)
    if (endRoomBtn) {
        endRoomBtn.addEventListener('click', function() {
            if (confirm('B·∫°n c√≥ ch·∫Øc mu·ªën k·∫øt th√∫c ph√≤ng? T·∫•t c·∫£ ng∆∞·ªùi ch∆°i s·∫Ω b·ªã ƒë∆∞a ra ngo√†i.')) {
                endRoom();
            }
        });
    }
    
    // N√∫t k·∫øt th√∫c game (trong battle room)
    if (endGameBtn) {
        endGameBtn.addEventListener('click', function() {
            if (confirm('B·∫°n c√≥ ch·∫Øc mu·ªën k·∫øt th√∫c tr·∫≠n ƒë·∫•u? K·∫øt qu·∫£ hi·ªán t·∫°i s·∫Ω ƒë∆∞·ª£c l∆∞u.')) {
                endGame();
            }
        });
    }
    
    // B·∫Øt ƒë·∫ßu tr√≤ ch∆°i
    function startBattle() {
        if (!socket || !roomInfo.code) return;
        
        socket.emit('start_game', {
            roomCode: roomInfo.code,
            userId: userId
        }, function(response) {
            if (!response.success) {
                alert('Kh√¥ng th·ªÉ b·∫Øt ƒë·∫ßu tr√≤ ch∆°i: ' + response.error);
            }
        });
    }
    
    // Hi·ªÉn th·ªã ƒë·∫øm ng∆∞·ª£c
    function showCountdown(seconds) {
        // ·∫®n ph√≤ng ch·ªù, hi·ªÉn th·ªã ph√≤ng thi ƒë·∫•u
        waitingRoom.style.display = 'none';
        battleRoom.style.display = 'block';
        
        // Hi·ªÉn th·ªã n√∫t k·∫øt th√∫c game cho ch·ªß ph√≤ng
        if (roomInfo.creator && endGameBtn) {
            endGameBtn.style.display = 'block';
        }
        
        // Reset ƒëi·ªÉm s·ªë
        playerScore = 0;
        document.getElementById('user-score').textContent = '0';
        
        // T·∫°o ph·∫ßn t·ª≠ ƒë·∫øm ng∆∞·ª£c
        const countdownEl = document.createElement('div');
        countdownEl.className = 'countdown';
        countdownEl.textContent = seconds;
        battleRoom.appendChild(countdownEl);
        
        // ƒê·∫øm ng∆∞·ª£c
        let count = seconds;
        const countInterval = setInterval(() => {
            count--;
            countdownEl.textContent = count;
            
            if (count <= 0) {
                clearInterval(countInterval);
                battleRoom.removeChild(countdownEl);
            }
        }, 1000);
    }
    
    // Th√™m event listener cho n√∫t submit answer
    document.getElementById('submit-answer').addEventListener('click', function() {
        submitAnswer();
    });
    
    // Th√™m event listener cho ph√≠m Enter trong input
    document.getElementById('answer-input').addEventListener('keypress', function(event) {
        if (event.key === 'Enter') {
            submitAnswer();
        }
    });
    
    // Hi·ªÉn th·ªã c√¢u h·ªèi
    function showQuestion(data) {
        const { questionNumber, totalQuestions, question, totalTimeLeft } = data;
        
        console.log('üìã showQuestion called:', { questionNumber, totalQuestions, questionText: question?.text?.substring(0, 50) + '...' });
        
        // L∆∞u c√¢u h·ªèi hi·ªán t·∫°i
        currentQuestion = question;
        currentQuestionIndex = questionNumber - 1;
        questionStartTime = Date.now();
        
        // C·∫≠p nh·∫≠t s·ªë c√¢u h·ªèi
        currentQuestionEl.textContent = questionNumber;
        totalQuestionsEl.textContent = totalQuestions;
        
        // ƒê·∫∑t n·ªôi dung c√¢u h·ªèi
        questionTextEl.textContent = question.text;
        
        // Reset input v√† n√∫t tr·∫£ l·ªùi
        const answerInput = document.getElementById('answer-input');
        answerInput.value = '';
        answerInput.disabled = false;
        document.getElementById('submit-answer').disabled = false;
        
        // X√≥a k·∫øt qu·∫£ c√¢u tr·∫£ l·ªùi tr∆∞·ªõc ƒë√≥
        const answerResult = document.getElementById('answer-result');
        answerResult.textContent = '';
        answerResult.className = 'answer-result';
        
        // C·∫≠p nh·∫≠t timer t·ªïng
        updateTimer(totalTimeLeft);
        
        // C·∫≠p nh·∫≠t tr·∫°ng th√°i ng∆∞·ªùi tham gia
        updateParticipantsStatus([]);
        
        // Focus v√†o input ƒë·ªÉ ng∆∞·ªùi d√πng c√≥ th·ªÉ nh·∫≠p ngay
        answerInput.focus();
    }
    
    // Ch·ªçn c√¢u tr·∫£ l·ªùi
    function submitAnswer() {
        if (!currentQuestion) return;
        
        const answerInput = document.getElementById('answer-input');
        const userAnswer = answerInput.value.trim();
        
        if (!userAnswer) {
            showNotification('Vui l√≤ng nh·∫≠p c√¢u tr·∫£ l·ªùi!', 'warning');
            return;
        }
        
        // V√¥ hi·ªáu h√≥a input v√† n√∫t tr·∫£ l·ªùi
        answerInput.disabled = true;
        document.getElementById('submit-answer').disabled = true;
        
        // T√≠nh th·ªùi gian tr·∫£ l·ªùi (gi√¢y)
        const answerTime = Math.floor((Date.now() - questionStartTime) / 1000);
        
        // G·ª≠i c√¢u tr·∫£ l·ªùi ƒë·∫øn server
        socket.emit('submit_answer', {
            roomCode: roomInfo.code,
            userId: userId,
            userAnswer: userAnswer,
            answerTime: answerTime
        }, function(response) {
            if (response.success) {
                const answerResult = document.getElementById('answer-result');
                
                // C·∫≠p nh·∫≠t ƒëi·ªÉm s·ªë - m·ªói c√¢u ƒë√∫ng ƒë∆∞·ª£c 10 ƒëi·ªÉm
                if (response.isCorrect) {
                    playerScore += 10; // C·ªë ƒë·ªãnh 10 ƒëi·ªÉm cho m·ªói c√¢u ƒë√∫ng
                    document.getElementById('user-score').textContent = playerScore;
                    
                    answerResult.textContent = 'ƒê√∫ng! +10 ƒëi·ªÉm';
                    answerResult.className = 'answer-result correct';
                    showNotification('ƒê√∫ng! +10 ƒëi·ªÉm', 'success');
                } else {
                    answerResult.textContent = `Sai! ƒê√°p √°n ƒë√∫ng: ${response.correctAnswer}`;
                    answerResult.className = 'answer-result incorrect';
                    showNotification('Sai r·ªìi!', 'error');
                }
                
                // ‚úÖ T·ª± chuy·ªÉn c√¢u ti·∫øp theo nh∆∞ solo battle - KH√îNG ch·ªù ng∆∞·ªùi kh√°c
                setTimeout(() => {
                    currentQuestionIndex++;
                    
                    // Ki·ªÉm tra n·∫øu h·∫øt c√¢u h·ªèi
                    if (currentQuestionIndex >= allQuestions.length) {
                        console.log('üèÅ ƒê√£ ho√†n th√†nh t·∫•t c·∫£ c√¢u h·ªèi!');
                        finishMyGame();
                        return;
                    }
                    
                    // Hi·ªÉn th·ªã c√¢u ti·∫øp theo
                    const questionIndex = myQuestionOrder[currentQuestionIndex];
                    const nextQuestion = allQuestions[questionIndex];
                    
                    showQuestion({
                        questionNumber: currentQuestionIndex + 1,
                        totalQuestions: allQuestions.length,
                        question: nextQuestion,
                        totalTimeLeft: document.getElementById('total-timer').textContent
                    });
                }, 1500);
            } else {
                showNotification('L·ªói khi g·ª≠i c√¢u tr·∫£ l·ªùi: ' + response.error, 'error');
            }
        });
    }
    
    // X·ª≠ l√Ω khi h·∫øt th·ªùi gian c√¢u h·ªèi
    function handleQuestionTimeout() {
        // V√¥ hi·ªáu h√≥a input v√† n√∫t tr·∫£ l·ªùi
        const answerInput = document.getElementById('answer-input');
        answerInput.disabled = true;
        document.getElementById('submit-answer').disabled = true;
        
        // Hi·ªÉn th·ªã th√¥ng b√°o
        const answerResult = document.getElementById('answer-result');
        answerResult.textContent = 'H·∫øt th·ªùi gian! B·∫°n kh√¥ng nh·∫≠n ƒë∆∞·ª£c ƒëi·ªÉm cho c√¢u h·ªèi n√†y.';
        answerResult.className = 'answer-result incorrect';
        
        showNotification('H·∫øt th·ªùi gian!');
    }
    
    // X·ª≠ l√Ω khi c√≥ th√¥ng b√°o b·∫Øt ƒë·∫ßu c√¢u h·ªèi m·ªõi  
    function handleNewQuestionStart(data) {
        console.log('üì® Nh·∫≠n event new_question_start v·ªõi data:', data);
        
        // L·∫ßn ƒë·∫ßu nh·∫≠n data, l∆∞u t·∫•t c·∫£ c√¢u h·ªèi v√† t·∫°o th·ª© t·ª± ng·∫´u nhi√™n
        allQuestions = data.questionData;
        myQuestionOrder = shuffleArray([...Array(allQuestions.length).keys()]);
        console.log('üîÄ Th·ª© t·ª± c√¢u h·ªèi c·ªßa t√¥i:', myQuestionOrder);
        
        currentQuestionIndex = 0; // Reset v·ªÅ c√¢u ƒë·∫ßu ti√™n
        gameStartTime = Date.now();
        gameFinished = false;
        
        // B·∫Øt ƒë·∫ßu timer 60 gi√¢y t·ªïng
        startTotalTimer();
        
        // Hi·ªÉn th·ªã c√¢u h·ªèi ƒë·∫ßu ti√™n
        const questionIndex = myQuestionOrder[currentQuestionIndex];
        const question = allQuestions[questionIndex];
        
        console.log('üìã Hi·ªÉn th·ªã c√¢u h·ªèi ƒë·∫ßu ti√™n:', currentQuestionIndex + 1);
        
        showQuestion({
            questionNumber: currentQuestionIndex + 1,
            totalQuestions: allQuestions.length,
            question: question,
            totalTimeLeft: totalTimeRemaining
        });
    }
    
    // B·∫Øt ƒë·∫ßu timer 60 gi√¢y t·ªïng (t·ª´ solo battle)
    function startTotalTimer() {
        totalTimeRemaining = 60;
        updateTimer(totalTimeRemaining);
        
        if (timerInterval) {
            clearInterval(timerInterval);
        }
        
        timerInterval = setInterval(() => {
            totalTimeRemaining--;
            updateTimer(totalTimeRemaining);
            
            if (totalTimeRemaining <= 0) {
                clearInterval(timerInterval);
                if (!gameFinished) {
                    console.log('‚è∞ H·∫øt th·ªùi gian! K·∫øt th√∫c game t·ª± ƒë·ªông');
                    handleGameTimeout();
                }
            }
        }, 1000);
    }
    
    // C·∫≠p nh·∫≠t hi·ªÉn th·ªã timer
    function updateTimer(timeLeft) {
        document.getElementById('total-timer').textContent = timeLeft;
    }
    
    // X·ª≠ l√Ω khi h·∫øt th·ªùi gian t·ªïng
    function handleGameTimeout() {
        if (gameFinished) return;
        
        gameFinished = true;
        clearInterval(timerInterval);
        
        // V√¥ hi·ªáu h√≥a input v√† n√∫t tr·∫£ l·ªùi
        const answerInput = document.getElementById('answer-input');
        const submitBtn = document.getElementById('submit-answer');
        if (answerInput) answerInput.disabled = true;
        if (submitBtn) submitBtn.disabled = true;
        
        showNotification('H·∫øt th·ªùi gian! Game k·∫øt th√∫c.', 'warning');
        
        // K·∫øt th√∫c game c·ªßa m√¨nh
        finishMyGame();
    }
    
    // K·∫øt th√∫c game c·ªßa ri√™ng m√¨nh 
    function finishMyGame() {
        if (gameFinished) return;
        
        gameFinished = true;
        clearInterval(timerInterval);
        
        const completionTime = Math.floor((Date.now() - gameStartTime) / 1000);
        
        console.log('üèÅ Ho√†n th√†nh game! ƒêi·ªÉm:', playerScore, '- Th·ªùi gian:', completionTime);
        
        // G·ª≠i k·∫øt qu·∫£ ƒë·∫øn server
        socket.emit('finish_game', {
            roomCode: roomInfo.code,
            userId: userId,
            score: playerScore,
            completionTime: completionTime,
            questionsAnswered: currentQuestionIndex
        }, function(response) {
            if (response.success) {
                showNotification('ƒê√£ g·ª≠i k·∫øt qu·∫£ th√†nh c√¥ng!', 'success');
            } else {
                console.error('L·ªói g·ª≠i k·∫øt qu·∫£:', response.error);
            }
        });
    }
    
    // Helper function: Shuffle array (gi·ªëng b√™n server)
    function shuffleArray(array) {
        const shuffled = [...array];
        for (let i = shuffled.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
        }
        return shuffled;
    }
    
    // C·∫≠p nh·∫≠t timer t·ªïng
    function updateTimer(totalTimeLeft) {
        const totalTimerEl = document.getElementById('total-timer');
        if (totalTimerEl) {
            totalTimerEl.textContent = totalTimeLeft;
            
            // ƒê·ªïi m√†u th·ªùi gian t·ªïng khi c√≤n √≠t
            if (totalTimeLeft <= 10) {
                totalTimerEl.style.color = '#e74c3c';
            } else {
                totalTimerEl.style.color = '';
            }
        }
    }
    
    // C·∫≠p nh·∫≠t tr·∫°ng th√°i ng∆∞·ªùi tham gia trong tr·∫≠n ƒë·∫•u
    function updateParticipantsStatus(answeredUsers = []) {
        if (!roomInfo || !roomInfo.participants) return;
        
        participantsStatusEl.innerHTML = '';
        
        // S·∫Øp x·∫øp ng∆∞·ªùi ch∆°i theo ƒëi·ªÉm s·ªë
        const sortedParticipants = [...roomInfo.participants].sort((a, b) => b.score - a.score);
        
        sortedParticipants.forEach((participant, index) => {
            const div = document.createElement('div');
            div.className = `participant-item participant-rank-${index + 1}`;
            
            // Ki·ªÉm tra xem ng∆∞·ªùi d√πng ƒë√£ tr·∫£ l·ªùi ch∆∞a
            const hasAnswered = answeredUsers.some(u => u.userId === participant.id);
            
            div.innerHTML = `
                <span class="participant-name">${participant.username}</span>
                <div class="participant-info">
                    <span class="participant-score">${participant.score || 0}</span>
                    <span class="participant-status-indicator ${hasAnswered ? 'answered' : ''}">
                        ${hasAnswered ? '‚úì' : '...'}
                    </span>
                </div>
            `;
            
            participantsStatusEl.appendChild(div);
        });
    }
    
    // C·∫≠p nh·∫≠t tr·∫°ng th√°i ng∆∞·ªùi tham gia khi c√≥ ng∆∞·ªùi tr·∫£ l·ªùi
    function updateParticipantStatus(data) {
        const { userId, username, hasAnswered } = data;
        
        // T√¨m ng∆∞·ªùi tham gia trong roomInfo
        const participant = roomInfo.participants.find(p => p.id === userId);
        if (participant) {
            participant.hasAnswered = hasAnswered;
        }
        
        // T√¨m ph·∫ßn t·ª≠ tr·∫°ng th√°i c·ªßa ng∆∞·ªùi d√πng
        const statusElements = document.querySelectorAll('.participant-item');
        for (const element of statusElements) {
            const nameEl = element.querySelector('.participant-name');
            if (nameEl && nameEl.textContent === username) {
                const indicatorEl = element.querySelector('.participant-status-indicator');
                if (indicatorEl) {
                    indicatorEl.classList.add('answered');
                    indicatorEl.textContent = '‚úì';
                }
                break;
            }
        }
    }
    
    // Hi·ªÉn th·ªã k·∫øt qu·∫£ cu·ªëi c√πng
    function showResults(results) {
        // ·∫®n ph√≤ng thi ƒë·∫•u, hi·ªÉn th·ªã ph√≤ng k·∫øt qu·∫£
        battleRoom.style.display = 'none';
        resultRoom.style.display = 'block';
        
        // X√≥a b·ªô ƒë·∫øm th·ªùi gian
        clearInterval(timerInterval);
        
        // Hi·ªÉn th·ªã b·∫£ng k·∫øt qu·∫£
        resultTableBodyEl.innerHTML = '';
        results.forEach(result => {
            const tr = document.createElement('tr');
            
            // Th√™m class cho top 3
            if (result.rank <= 3) {
                tr.className = `rank-${result.rank}`;
            }
            
            tr.innerHTML = `
                <td>${result.rank}</td>
                <td>${result.username}</td>
                <td>${result.score}</td>
            `;
            resultTableBodyEl.appendChild(tr);
        });
    }
    
    // K·∫øt th√∫c ph√≤ng (ch·ªß ph√≤ng)
    function endRoom() {
        if (!socket || !roomInfo.code) return;
        
        socket.emit('end_room', {
            roomCode: roomInfo.code,
            userId: userId
        }, function(response) {
            if (response.success) {
                alert('ƒê√£ k·∫øt th√∫c ph√≤ng');
                window.location.href = '/';
            } else {
                alert('Kh√¥ng th·ªÉ k·∫øt th√∫c ph√≤ng: ' + response.error);
            }
        });
    }
    
    // K·∫øt th√∫c game (ch·ªß ph√≤ng)
    function endGame() {
        if (!socket || !roomInfo.code) return;
        
        socket.emit('end_game', {
            roomCode: roomInfo.code,
            userId: userId
        }, function(response) {
            if (response.success) {
                console.log('ƒê√£ y√™u c·∫ßu k·∫øt th√∫c game');
            } else {
                alert('Kh√¥ng th·ªÉ k·∫øt th√∫c game: ' + response.error);
            }
        });
    }
    
    // Hi·ªÉn th·ªã th√¥ng b√°o
    function showNotification(message) {
        const notification = document.createElement('div');
        notification.className = 'notification';
        notification.textContent = message;
        
        document.body.appendChild(notification);
        
        setTimeout(() => {
            notification.classList.add('show');
        }, 10);
        
        setTimeout(() => {
            notification.classList.remove('show');
            setTimeout(() => {
                if (document.body.contains(notification)) {
                    document.body.removeChild(notification);
                }
            }, 300);
        }, 2000);
    }
});