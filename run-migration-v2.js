/**
 * Script ƒë·ªÉ ch·∫°y migration sang ki·∫øn tr√∫c v2.0
 * C·∫¢NH B√ÅO: Script n√†y s·∫Ω DROP b·∫£ng matches, match_participants, match_questions c≈©!
 */

import { pool } from './db/index.js';
import fs from 'fs/promises';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

async function runMigration() {
  console.log('üîÑ B·∫Øt ƒë·∫ßu migration sang ki·∫øn tr√∫c v2.0...\n');
  
  try {
    // ƒê·ªçc file migration SQL
    const migrationPath = path.join(__dirname, 'db/init/05-matches-metadata.sql');
    const migrationSQL = await fs.readFile(migrationPath, 'utf-8');
    
    console.log('üìÑ ƒê·ªçc file migration: 05-matches-metadata.sql');
    
    // Backup d·ªØ li·ªáu c≈© (n·∫øu c√≥)
    console.log('\nüì¶ Backup d·ªØ li·ªáu c≈©...');
    
    try {
      const [oldMatches] = await pool.query('SELECT * FROM matches');
      console.log(`   T√¨m th·∫•y ${oldMatches.length} tr·∫≠n ƒë·∫•u c≈©`);
      
      if (oldMatches.length > 0) {
        const backupPath = path.join(__dirname, `backup_matches_${Date.now()}.json`);
        await fs.writeFile(backupPath, JSON.stringify(oldMatches, null, 2));
        console.log(`   ‚úÖ ƒê√£ backup v√†o: ${backupPath}`);
      }
    } catch (error) {
      console.log('   ‚ÑπÔ∏è  Kh√¥ng c√≥ d·ªØ li·ªáu c≈© ƒë·ªÉ backup');
    }
    
    // Ch·∫°y migration
    console.log('\nüî® Ch·∫°y migration SQL...');
    
    // Split SQL th√†nh c√°c statements
    const statements = migrationSQL
      .split(';')
      .map(s => s.trim())
      .filter(s => s.length > 0 && !s.startsWith('--'));
    
    for (const statement of statements) {
      if (statement.trim()) {
        console.log(`   Executing: ${statement.substring(0, 50)}...`);
        await pool.query(statement);
      }
    }
    
    console.log('   ‚úÖ Migration SQL ho√†n t·∫•t');
    
    // Verify b·∫£ng m·ªõi
    console.log('\nüîç Verify b·∫£ng m·ªõi...');
    
    const [tables] = await pool.query(`
      SELECT TABLE_NAME, TABLE_COMMENT 
      FROM information_schema.TABLES 
      WHERE TABLE_SCHEMA = DATABASE() 
      AND TABLE_NAME = 'matches'
    `);
    
    if (tables.length > 0) {
      console.log('   ‚úÖ B·∫£ng matches ƒë√£ ƒë∆∞·ª£c t·∫°o');
      console.log(`   Comment: ${tables[0].TABLE_COMMENT}`);
    } else {
      throw new Error('B·∫£ng matches kh√¥ng ƒë∆∞·ª£c t·∫°o!');
    }
    
    // Ki·ªÉm tra columns
    const [columns] = await pool.query(`
      SELECT COLUMN_NAME, COLUMN_TYPE, IS_NULLABLE, COLUMN_COMMENT
      FROM information_schema.COLUMNS
      WHERE TABLE_SCHEMA = DATABASE()
      AND TABLE_NAME = 'matches'
      ORDER BY ORDINAL_POSITION
    `);
    
    console.log('\nüìã C·∫•u tr√∫c b·∫£ng matches:');
    columns.forEach(col => {
      console.log(`   - ${col.COLUMN_NAME}: ${col.COLUMN_TYPE} ${col.IS_NULLABLE === 'NO' ? 'NOT NULL' : 'NULL'}`);
      if (col.COLUMN_COMMENT) {
        console.log(`     ${col.COLUMN_COMMENT}`);
      }
    });
    
    console.log('\n‚úÖ Migration ho√†n t·∫•t th√†nh c√¥ng!');
    console.log('\nüìù Ti·∫øp theo:');
    console.log('   1. Restart KD Server: npm run dev');
    console.log('   2. Test t·∫°o tr·∫≠n ƒë·∫•u m·ªõi');
    console.log('   3. Ki·ªÉm tra folder ƒë∆∞·ª£c t·∫°o tr√™n Data Node');
    
  } catch (error) {
    console.error('\n‚ùå Migration th·∫•t b·∫°i:', error);
    console.error('\nStack trace:', error.stack);
    process.exit(1);
  } finally {
    await pool.end();
  }
}

// Run migration
runMigration();

