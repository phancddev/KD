#!/bin/bash

# setup_nginx_proxy.sh - Script ƒë·ªÉ setup nginx proxy cho domain
# S·ª≠ d·ª•ng: sudo ./setup_nginx_proxy.sh <domain>

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_header() {
    echo -e "${BLUE}[NGINX PROXY SETUP]${NC} $1"
}

# Check if running as root
if [ "$EUID" -ne 0 ]; then
    print_error "Script n√†y c·∫ßn ch·∫°y v·ªõi quy·ªÅn root!"
    echo "S·ª≠ d·ª•ng: sudo $0 <domain>"
    exit 1
fi

# Check if domain parameter is provided
if [ $# -eq 0 ]; then
    print_error "Vui l√≤ng nh·∫≠p domain name!"
    echo "S·ª≠ d·ª•ng: sudo $0 <domain>"
    echo "V√≠ d·ª•: sudo $0 kd.tiepluatrithuc.com"
    exit 1
fi

DOMAIN=$1
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

print_header "Setup nginx proxy cho domain: ${DOMAIN}"

# Check if nginx is installed
if ! command -v nginx &> /dev/null; then
    print_error "Nginx ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t tr√™n h·ªá th·ªëng!"
    print_status "ƒêang c√†i ƒë·∫∑t nginx..."
    apt update
    apt install -y nginx
fi

# Check if sites-available directory exists
if [ ! -d "/etc/nginx/sites-available" ]; then
    print_warning "Th∆∞ m·ª•c sites-available kh√¥ng t·ªìn t·∫°i, t·∫°o m·ªõi..."
    mkdir -p /etc/nginx/sites-available
    mkdir -p /etc/nginx/sites-enabled
fi

# Generate SSL certificate for the domain if not exists
if [ ! -f "/etc/letsencrypt/live/${DOMAIN}/fullchain.pem" ]; then
    print_status "ƒêang t·∫°o SSL certificate cho ${DOMAIN}..."
    
    # Install certbot if not exists
    if ! command -v certbot &> /dev/null; then
        print_status "ƒêang c√†i ƒë·∫∑t certbot..."
        apt update
        apt install -y certbot python3-certbot-nginx
    fi
    
    # Stop nginx temporarily to use standalone mode
    systemctl stop nginx 2>/dev/null || true
    
    # Get certificate
    if certbot certonly --standalone \
        --non-interactive \
        --agree-tos \
        --register-unsafely-without-email \
        --domains "${DOMAIN}" \
        --keep-until-expiring; then
        print_status "‚úÖ SSL certificate ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!"
    else
        print_error "‚ùå Kh√¥ng th·ªÉ t·∫°o SSL certificate!"
        print_warning "S·∫Ω t·∫°o config nginx m√† kh√¥ng c√≥ SSL"
    fi
    
    # Start nginx back
    systemctl start nginx
fi

# Create nginx config for the domain
print_status "ƒêang t·∫°o nginx config cho ${DOMAIN}..."

cat > "/etc/nginx/sites-available/${DOMAIN}" << EOF
# Nginx proxy config for ${DOMAIN}
# Generated by setup_nginx_proxy.sh

server {
    listen 80;
    server_name ${DOMAIN};
    
    # Redirect HTTP to HTTPS
    return 301 https://\$host\$request_uri;
}

server {
    listen 443 ssl http2;
    server_name ${DOMAIN};

    # SSL Configuration
    ssl_certificate /etc/letsencrypt/live/${DOMAIN}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/${DOMAIN}/privkey.pem;
    
    # Include SSL config if exists
    include /etc/letsencrypt/options-ssl-nginx.conf;
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;
    
    # SSL Settings
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    # Security headers
    add_header Strict-Transport-Security "max-age=63072000" always;
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;

    # Logging
    access_log /var/log/nginx/${DOMAIN}_access.log;
    error_log /var/log/nginx/${DOMAIN}_error.log;

    # Proxy to KD app running on port 1443 (HTTPS)
    location / {
        proxy_pass https://127.0.0.1:1443;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        proxy_set_header X-Forwarded-Host \$server_name;
        
        # WebSocket support
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection "upgrade";
        
        # Timeout settings
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
        
        # SSL verification (t·∫Øt v√¨ d√πng self-signed cert trong Docker)
        proxy_ssl_verify off;
        
        # Buffer settings
        proxy_buffering on;
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;
        proxy_busy_buffers_size 8k;
    }

    # Health check
    location /health {
        proxy_pass https://127.0.0.1:1443/health;
        proxy_ssl_verify off;
        access_log off;
    }

    # Static files optimization
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        proxy_pass https://127.0.0.1:1443;
        proxy_ssl_verify off;
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header Vary Accept-Encoding;
    }

    # Block access to sensitive files
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }
}
EOF

# Enable the site
print_status "ƒêang enable site ${DOMAIN}..."
if [ -L "/etc/nginx/sites-enabled/${DOMAIN}" ]; then
    print_warning "Site ƒë√£ ƒë∆∞·ª£c enable tr∆∞·ªõc ƒë√≥"
else
    ln -s "/etc/nginx/sites-available/${DOMAIN}" "/etc/nginx/sites-enabled/"
fi

# Test nginx configuration
print_status "ƒêang ki·ªÉm tra nginx config..."
if nginx -t; then
    print_status "‚úÖ Nginx config h·ª£p l·ªá!"
else
    print_error "‚ùå Nginx config c√≥ l·ªói!"
    exit 1
fi

# Reload nginx
print_status "ƒêang reload nginx..."
systemctl reload nginx

# Check if nginx is running
if systemctl is-active --quiet nginx; then
    print_status "‚úÖ Nginx ƒëang ch·∫°y!"
else
    print_error "‚ùå Nginx kh√¥ng ch·∫°y!"
    systemctl status nginx
    exit 1
fi

print_status "üéâ Setup ho√†n t·∫•t!"
echo
echo "=================================="
echo "üìã Th√¥ng tin proxy setup:"
echo "=================================="
echo "üåê Domain: ${DOMAIN}"
echo "üîó URL: https://${DOMAIN}"
echo "üìÅ Nginx config: /etc/nginx/sites-available/${DOMAIN}"
echo "üìÑ Nginx config enabled: /etc/nginx/sites-enabled/${DOMAIN}"
echo "üìã Log files:"
echo "  - Access: /var/log/nginx/${DOMAIN}_access.log"
echo "  - Error: /var/log/nginx/${DOMAIN}_error.log"
echo
echo "üìã C√°c l·ªánh h·ªØu √≠ch:"
echo "  - Ki·ªÉm tra config: sudo nginx -t"
echo "  - Reload nginx: sudo systemctl reload nginx"
echo "  - Xem logs: sudo tail -f /var/log/nginx/${DOMAIN}_access.log"
echo "  - Disable site: sudo rm /etc/nginx/sites-enabled/${DOMAIN}"
echo
print_status "üöÄ Truy c·∫≠p https://${DOMAIN} ƒë·ªÉ ki·ªÉm tra!"

# Setup auto-renewal for SSL
if [ -f "/etc/letsencrypt/live/${DOMAIN}/fullchain.pem" ]; then
    print_status "ƒêang setup auto-renewal cho SSL certificate..."
    
    # Add cron job if it doesn't exist
    CRON_JOB="0 12 * * * /usr/bin/certbot renew --quiet --post-hook 'systemctl reload nginx'"
    
    if ! crontab -l 2>/dev/null | grep -q "certbot renew"; then
        (crontab -l 2>/dev/null; echo "${CRON_JOB}") | crontab -
        print_status "‚úÖ Auto-renewal ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p!"
    else
        print_status "Auto-renewal ƒë√£ t·ªìn t·∫°i"
    fi
fi

print_status "‚úÖ Domain ${DOMAIN} ƒë√£ s·∫µn s√†ng!"