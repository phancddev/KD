/**
 * Script ki·ªÉm tra v√† t·∫°o t·∫•t c·∫£ b·∫£ng database c·∫ßn thi·∫øt
 * Ch·∫°y: node check-database.js
 */

import { pool } from './db/index.js';

const REQUIRED_TABLES = [
  // B·∫£ng c∆° b·∫£n
  'users',
  'questions',
  'game_history',
  'reports',
  'login_logs',
  'question_logs',
  
  // B·∫£ng TƒÉng T·ªëc
  'tangtoc_questions',
  'tangtoc_game_history',
  'tangtoc_reports',
  'tangtoc_question_logs',
  'tangtoc_question_deletion_logs',
  
  // B·∫£ng Data Nodes & Matches
  'data_nodes',
  'matches',
  'match_questions',
  'match_participants',
  'match_players',
  'match_answers',
  'match_results',
  'match_events',
  'match_upload_logs'
];

async function checkDatabase() {
  console.log('üîç ƒêang ki·ªÉm tra database...\n');
  
  try {
    // L·∫•y danh s√°ch t·∫•t c·∫£ b·∫£ng
    const [tables] = await pool.query('SHOW TABLES');
    const existingTables = tables.map(row => Object.values(row)[0]);
    
    console.log(`üìä T·ªïng s·ªë b·∫£ng hi·ªán c√≥: ${existingTables.length}`);
    console.log(`üìã T·ªïng s·ªë b·∫£ng c·∫ßn thi·∫øt: ${REQUIRED_TABLES.length}\n`);
    
    // Ki·ªÉm tra t·ª´ng b·∫£ng
    const missingTables = [];
    const existingRequiredTables = [];
    
    for (const tableName of REQUIRED_TABLES) {
      if (existingTables.includes(tableName)) {
        console.log(`‚úÖ ${tableName}`);
        existingRequiredTables.push(tableName);
      } else {
        console.log(`‚ùå ${tableName} - THI·∫æU!`);
        missingTables.push(tableName);
      }
    }
    
    console.log('\n' + '='.repeat(50));
    console.log('üìä K·∫æT QU·∫¢ KI·ªÇM TRA');
    console.log('='.repeat(50));
    console.log(`‚úÖ B·∫£ng ƒë√£ c√≥: ${existingRequiredTables.length}/${REQUIRED_TABLES.length}`);
    console.log(`‚ùå B·∫£ng thi·∫øu: ${missingTables.length}/${REQUIRED_TABLES.length}`);
    
    if (missingTables.length > 0) {
      console.log('\n‚ö†Ô∏è  C√ÅC B·∫¢NG THI·∫æU:');
      missingTables.forEach(table => {
        console.log(`   - ${table}`);
      });
      
      console.log('\nüí° C√ÅCH FIX:');
      console.log('   1. Restart server: cd KD && npm start');
      console.log('   2. Ho·∫∑c ch·∫°y migration th·ªß c√¥ng:');
      console.log('      mysql -u nqd_user -pnqd_password nqd_database < db/init/04-host-dan-data-node-migration.sql');
      
      process.exit(1);
    } else {
      console.log('\nüéâ T·∫§T C·∫¢ B·∫¢NG ƒê√É S·∫¥N S√ÄNG!');
      
      // Ki·ªÉm tra c·∫•u tr√∫c b·∫£ng match_participants
      console.log('\nüîç Ki·ªÉm tra c·∫•u tr√∫c b·∫£ng match_participants...');
      const [columns] = await pool.query('DESCRIBE match_participants');
      console.log('\nüìã C·ªôt trong b·∫£ng match_participants:');
      columns.forEach(col => {
        console.log(`   - ${col.Field} (${col.Type})`);
      });
      
      // Ki·ªÉm tra s·ªë l∆∞·ª£ng data nodes
      const [nodes] = await pool.query('SELECT COUNT(*) as count FROM data_nodes');
      console.log(`\nüìä S·ªë data nodes: ${nodes[0].count}`);
      
      // Ki·ªÉm tra s·ªë l∆∞·ª£ng matches
      const [matches] = await pool.query('SELECT COUNT(*) as count FROM matches');
      console.log(`üìä S·ªë matches: ${matches[0].count}`);
      
      process.exit(0);
    }
    
  } catch (error) {
    console.error('‚ùå L·ªói khi ki·ªÉm tra database:', error);
    process.exit(1);
  }
}

// Ch·∫°y ki·ªÉm tra
checkDatabase();

