/**
 * API Routes cho qu·∫£n l√Ω Data Nodes
 */

import express from 'express';
import {
  createDataNode,
  getAllDataNodes,
  getDataNodeById,
  updateDataNode,
  deleteDataNode,
  getOnlineDataNodes
} from '../db/data-nodes.js';
import {
  getConnectedDataNodes,
  isDataNodeOnline,
  getStorageInfo
} from '../socket/data-node-server.js';

const router = express.Router();

/**
 * Middleware ki·ªÉm tra admin
 */
function requireAdmin(req, res, next) {
  console.log('üîç requireAdmin - Session user:', req.session.user);

  if (!req.session.user) {
    console.log('‚ùå requireAdmin - Kh√¥ng c√≥ user trong session');
    return res.status(401).json({ error: 'Ch∆∞a ƒëƒÉng nh·∫≠p' });
  }

  // Ki·ªÉm tra c·∫£ is_admin v√† isAdmin ƒë·ªÉ t∆∞∆°ng th√≠ch
  const isAdmin = req.session.user.is_admin === 1 || req.session.user.is_admin === true || req.session.user.isAdmin === true;

  if (!isAdmin) {
    console.log('‚ùå requireAdmin - User kh√¥ng c√≥ quy·ªÅn admin');
    return res.status(403).json({ error: 'Ch·ªâ admin m·ªõi c√≥ quy·ªÅn truy c·∫≠p' });
  }

  console.log('‚úÖ requireAdmin - User c√≥ quy·ªÅn admin');
  next();
}

/**
 * GET /api/data-nodes
 * L·∫•y danh s√°ch t·∫•t c·∫£ data nodes
 */
router.get('/data-nodes', requireAdmin, async (req, res) => {
  try {
    const nodes = await getAllDataNodes();
    
    // Th√™m th√¥ng tin k·∫øt n·ªëi real-time
    const connectedNodes = getConnectedDataNodes();
    const nodesWithStatus = nodes.map(node => ({
      ...node,
      isConnected: isDataNodeOnline(node.id),
      connectionInfo: connectedNodes.find(cn => cn.nodeId === node.id) || null
    }));
    
    res.json({
      success: true,
      data: nodesWithStatus
    });
  } catch (error) {
    console.error('Error getting data nodes:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

/**
 * GET /api/data-nodes/:id
 * L·∫•y th√¥ng tin chi ti·∫øt data node
 */
router.get('/data-nodes/:id', requireAdmin, async (req, res) => {
  try {
    const node = await getDataNodeById(req.params.id);
    
    if (!node) {
      return res.status(404).json({
        success: false,
        error: 'Data node kh√¥ng t·ªìn t·∫°i'
      });
    }
    
    // Th√™m th√¥ng tin k·∫øt n·ªëi
    node.isConnected = isDataNodeOnline(node.id);
    
    res.json({
      success: true,
      data: node
    });
  } catch (error) {
    console.error('Error getting data node:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

/**
 * POST /api/data-nodes
 * T·∫°o data node m·ªõi
 */
router.post('/data-nodes', requireAdmin, async (req, res) => {
  try {
    const { name, host, port } = req.body;
    
    // Validate
    if (!name || !host || !port) {
      return res.status(400).json({
        success: false,
        error: 'Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc (name, host, port)'
      });
    }
    
    if (port < 1024 || port > 65535) {
      return res.status(400).json({
        success: false,
        error: 'Port ph·∫£i trong kho·∫£ng 1024-65535'
      });
    }
    
    const node = await createDataNode(name, host, port);
    
    res.json({
      success: true,
      data: node,
      message: 'ƒê√£ t·∫°o data node th√†nh c√¥ng'
    });
  } catch (error) {
    console.error('Error creating data node:', error);
    
    if (error.code === 'ER_DUP_ENTRY') {
      return res.status(400).json({
        success: false,
        error: 'Port n√†y ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng'
      });
    }
    
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

/**
 * PUT /api/data-nodes/:id
 * C·∫≠p nh·∫≠t data node
 */
router.put('/data-nodes/:id', requireAdmin, async (req, res) => {
  try {
    const { name, host, port } = req.body;
    const updates = {};
    
    if (name) updates.name = name;
    if (host) updates.host = host;
    if (port) {
      if (port < 1024 || port > 65535) {
        return res.status(400).json({
          success: false,
          error: 'Port ph·∫£i trong kho·∫£ng 1024-65535'
        });
      }
      updates.port = port;
    }
    
    const node = await updateDataNode(req.params.id, updates);
    
    if (!node) {
      return res.status(404).json({
        success: false,
        error: 'Data node kh√¥ng t·ªìn t·∫°i'
      });
    }
    
    res.json({
      success: true,
      data: node,
      message: 'ƒê√£ c·∫≠p nh·∫≠t data node th√†nh c√¥ng'
    });
  } catch (error) {
    console.error('Error updating data node:', error);
    
    if (error.code === 'ER_DUP_ENTRY') {
      return res.status(400).json({
        success: false,
        error: 'Port n√†y ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng'
      });
    }
    
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

/**
 * DELETE /api/data-nodes/:id
 * X√≥a data node
 */
router.delete('/data-nodes/:id', requireAdmin, async (req, res) => {
  try {
    await deleteDataNode(req.params.id);
    
    res.json({
      success: true,
      message: 'ƒê√£ x√≥a data node th√†nh c√¥ng'
    });
  } catch (error) {
    console.error('Error deleting data node:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

/**
 * GET /api/data-nodes/:id/storage
 * L·∫•y th√¥ng tin storage c·ªßa data node
 */
router.get('/data-nodes/:id/storage', requireAdmin, async (req, res) => {
  try {
    const nodeId = parseInt(req.params.id);
    
    if (!isDataNodeOnline(nodeId)) {
      return res.status(503).json({
        success: false,
        error: 'Data node ƒëang offline'
      });
    }
    
    const storageInfo = await getStorageInfo(nodeId);
    
    res.json({
      success: true,
      data: storageInfo
    });
  } catch (error) {
    console.error('Error getting storage info:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

/**
 * GET /api/data-nodes/online
 * L·∫•y danh s√°ch data nodes ƒëang online
 */
router.get('/data-nodes-online', requireAdmin, async (req, res) => {
  try {
    const nodes = await getOnlineDataNodes();
    
    res.json({
      success: true,
      data: nodes
    });
  } catch (error) {
    console.error('Error getting online nodes:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

export default router;

