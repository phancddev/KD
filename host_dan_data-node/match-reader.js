/**
 * Match Reader for KD Server
 * ƒê·ªçc match.json t·ª´ Data Nodes qua Socket.IO
 */

import { getDataNodeSocket } from './socket/data-node-server.js';
import { emitWithTimeout } from './socket/socket-helpers.js';

/**
 * T·∫°o tr·∫≠n ƒë·∫•u m·ªõi tr√™n Data Node
 * S·ª¨ D·ª§NG TIMEOUT ƒë·ªÉ tr√°nh hang forever
 */
export async function createMatchOnDataNode(dataNodeId, matchData) {
  const socket = getDataNodeSocket(dataNodeId);

  if (!socket) {
    throw new Error(`Data Node ${dataNodeId} kh√¥ng k·∫øt n·ªëi`);
  }

  console.log(`üì§ [CREATE_MATCH] Sending to node ${dataNodeId} with 30s timeout...`);
  const response = await emitWithTimeout(socket, 'create_match', matchData, 30000);
  console.log(`‚úÖ [CREATE_MATCH] Response received from node ${dataNodeId}`);

  return response.data;
}

/**
 * ƒê·ªçc match.json t·ª´ Data Node
 * S·ª¨ D·ª§NG TIMEOUT ƒë·ªÉ tr√°nh hang forever
 */
export async function getMatchFromDataNode(dataNodeId, matchId) {
  const socket = getDataNodeSocket(dataNodeId);

  if (!socket) {
    throw new Error(`Data Node ${dataNodeId} kh√¥ng k·∫øt n·ªëi`);
  }

  console.log(`üì§ [GET_MATCH] Sending to node ${dataNodeId} with 15s timeout...`);
  const response = await emitWithTimeout(socket, 'get_match', { matchId }, 15000);
  console.log(`‚úÖ [GET_MATCH] Response received from node ${dataNodeId}`);

  return response.data;
}

/**
 * Th√™m c√¢u h·ªèi v√†o match.json tr√™n Data Node
 * S·ª¨ D·ª§NG TIMEOUT
 */
export async function addQuestionToDataNode(dataNodeId, matchId, questionData) {
  const socket = getDataNodeSocket(dataNodeId);

  if (!socket) {
    throw new Error(`Data Node ${dataNodeId} kh√¥ng k·∫øt n·ªëi`);
  }

  console.log(`üì§ [ADD_QUESTION] Sending to node ${dataNodeId} with 20s timeout...`);
  const response = await emitWithTimeout(socket, 'add_question', { matchId, ...questionData }, 20000);
  console.log(`‚úÖ [ADD_QUESTION] Response received from node ${dataNodeId}`);

  return response.data;
}

/**
 * C·∫≠p nh·∫≠t c√¢u h·ªèi trong match.json tr√™n Data Node
 * S·ª¨ D·ª§NG TIMEOUT
 */
export async function updateQuestionInDataNode(dataNodeId, matchId, updateData) {
  const socket = getDataNodeSocket(dataNodeId);

  if (!socket) {
    throw new Error(`Data Node ${dataNodeId} kh√¥ng k·∫øt n·ªëi`);
  }

  console.log(`üì§ [UPDATE_QUESTION] Sending to node ${dataNodeId} with 20s timeout...`);
  const response = await emitWithTimeout(socket, 'update_question', { matchId, ...updateData }, 20000);
  console.log(`‚úÖ [UPDATE_QUESTION] Response received from node ${dataNodeId}`);

  return response.data;
}

/**
 * X√≥a c√¢u h·ªèi t·ª´ match.json tr√™n Data Node
 * S·ª¨ D·ª§NG TIMEOUT
 */
export async function deleteQuestionFromDataNode(dataNodeId, matchId, section, playerIndex, order) {
  const socket = getDataNodeSocket(dataNodeId);

  if (!socket) {
    throw new Error(`Data Node ${dataNodeId} kh√¥ng k·∫øt n·ªëi`);
  }

  console.log(`üì§ [DELETE_QUESTION] Sending to node ${dataNodeId} with 15s timeout...`);
  await emitWithTimeout(socket, 'delete_question', { matchId, section, playerIndex, order }, 15000);
  console.log(`‚úÖ [DELETE_QUESTION] Response received from node ${dataNodeId}`);

  return true;
}

/**
 * G√°n c√¢u h·ªèi cho th√≠ sinh kh√°c
 * S·ª¨ D·ª§NG TIMEOUT
 */
export async function assignPlayerToQuestion(dataNodeId, matchId, section, currentPlayerIndex, questionOrder, newPlayerIndex) {
  const socket = getDataNodeSocket(dataNodeId);

  if (!socket) {
    throw new Error(`Data Node ${dataNodeId} kh√¥ng k·∫øt n·ªëi`);
  }

  console.log(`üì§ [ASSIGN_PLAYER] Sending to node ${dataNodeId} with 15s timeout...`);
  const response = await emitWithTimeout(socket, 'assign_player', {
    matchId,
    section,
    currentPlayerIndex,
    questionOrder,
    newPlayerIndex
  }, 15000);
  console.log(`‚úÖ [ASSIGN_PLAYER] Response received from node ${dataNodeId}`);

  return response.data;
}

/**
 * X√≥a tr·∫≠n ƒë·∫•u t·ª´ Data Node
 * S·ª¨ D·ª§NG TIMEOUT
 */
export async function deleteMatchFromDataNode(dataNodeId, matchId) {
  const socket = getDataNodeSocket(dataNodeId);

  if (!socket) {
    throw new Error(`Data Node ${dataNodeId} kh√¥ng k·∫øt n·ªëi`);
  }

  console.log(`üì§ [DELETE_MATCH] Sending to node ${dataNodeId} with 20s timeout...`);
  await emitWithTimeout(socket, 'delete_match', { matchId }, 20000);
  console.log(`‚úÖ [DELETE_MATCH] Response received from node ${dataNodeId}`);

  return true;
}

/**
 * L·∫•y danh s√°ch t·∫•t c·∫£ tr·∫≠n ƒë·∫•u t·ª´ Data Node
 */
export async function getAllMatchesFromDataNode(dataNodeId) {
  return new Promise((resolve, reject) => {
    const socket = getDataNodeSocket(dataNodeId);
    
    if (!socket) {
      return reject(new Error(`Data Node ${dataNodeId} kh√¥ng k·∫øt n·ªëi`));
    }
    
    socket.emit('get_all_matches', {}, (response) => {
      if (response.success) {
        resolve(response.data);
      } else {
        reject(new Error(response.error || 'Kh√¥ng th·ªÉ l·∫•y danh s√°ch tr·∫≠n ƒë·∫•u'));
      }
    });
  });
}

/**
 * C·∫≠p nh·∫≠t tr·∫°ng th√°i tr·∫≠n ƒë·∫•u
 */
export async function updateMatchStatusOnDataNode(dataNodeId, matchId, status) {
  return new Promise((resolve, reject) => {
    const socket = getDataNodeSocket(dataNodeId);
    
    if (!socket) {
      return reject(new Error(`Data Node ${dataNodeId} kh√¥ng k·∫øt n·ªëi`));
    }
    
    socket.emit('update_match_status', { matchId, status }, (response) => {
      if (response.success) {
        resolve(true);
      } else {
        reject(new Error(response.error || 'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i'));
      }
    });
  });
}

/**
 * L·∫•y t·∫•t c·∫£ tr·∫≠n ƒë·∫•u t·ª´ t·∫•t c·∫£ Data Nodes
 */
export async function getAllMatchesFromAllDataNodes() {
  const { getDataNodes } = await import('./db/data-nodes.js');
  const dataNodes = await getDataNodes();
  
  const allMatches = [];
  
  for (const node of dataNodes) {
    if (node.status === 'online') {
      try {
        const matches = await getAllMatchesFromDataNode(node.id);
        
        // Th√™m th√¥ng tin data node v√†o m·ªói match
        const matchesWithNode = matches.map(match => ({
          ...match,
          data_node_id: node.id,
          data_node_name: node.name
        }));
        
        allMatches.push(...matchesWithNode);
      } catch (error) {
        console.error(`‚ùå L·ªói khi l·∫•y matches t·ª´ Data Node ${node.id}:`, error.message);
      }
    }
  }
  
  return allMatches;
}

/**
 * T√¨m tr·∫≠n ƒë·∫•u theo ID t·ª´ t·∫•t c·∫£ Data Nodes
 */
export async function findMatchById(matchId) {
  const { getDataNodes } = await import('./db/data-nodes.js');
  const dataNodes = await getDataNodes();
  
  for (const node of dataNodes) {
    if (node.status === 'online') {
      try {
        const match = await getMatchFromDataNode(node.id, matchId);
        return {
          match,
          dataNodeId: node.id,
          dataNodeName: node.name
        };
      } catch (error) {
        // Tr·∫≠n ƒë·∫•u kh√¥ng c√≥ tr√™n node n√†y, th·ª≠ node kh√°c
        continue;
      }
    }
  }
  
  throw new Error(`Kh√¥ng t√¨m th·∫•y tr·∫≠n ƒë·∫•u ${matchId} tr√™n b·∫•t k·ª≥ Data Node n√†o`);
}

