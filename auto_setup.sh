#!/bin/bash

# auto_setup.sh - Script t·ª± ƒë·ªông setup to√†n b·ªô h·ªá th·ªëng NQD v·ªõi nginx proxy
# S·ª≠ d·ª•ng: sudo ./auto_setup.sh <domain>

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_header() {
    echo -e "${BLUE}[AUTO SETUP]${NC} $1"
}

# Check if running as root
if [ "$EUID" -ne 0 ]; then
    print_error "Script n√†y c·∫ßn ch·∫°y v·ªõi quy·ªÅn root!"
    echo "S·ª≠ d·ª•ng: sudo $0 <domain>"
    exit 1
fi

# Check if domain parameter is provided
if [ $# -eq 0 ]; then
    print_error "Vui l√≤ng nh·∫≠p domain name!"
    echo "S·ª≠ d·ª•ng: sudo $0 <domain>"
    echo "V√≠ d·ª•: sudo $0 kd.tiepluatrithuc.com"
    exit 1
fi

DOMAIN=$1
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

print_header "üöÄ AUTO SETUP TO√ÄN B·ªò H·ªÜ TH·ªêNG NQD"
echo "Domain: ${DOMAIN}"
echo "========================================"

# 1. Check prerequisites
print_header "1. Ki·ªÉm tra y√™u c·∫ßu h·ªá th·ªëng"

# Check Docker
if ! command -v docker &> /dev/null; then
    print_status "C√†i ƒë·∫∑t Docker..."
    curl -fsSL https://get.docker.com -o get-docker.sh
    sh get-docker.sh
    systemctl enable docker
    systemctl start docker
    print_status "‚úÖ Docker ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t"
else
    print_status "‚úÖ Docker ƒë√£ c√≥ s·∫µn"
fi

# Check Docker Compose
if ! command -v docker-compose &> /dev/null; then
    print_status "C√†i ƒë·∫∑t Docker Compose..."
    curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    chmod +x /usr/local/bin/docker-compose
    print_status "‚úÖ Docker Compose ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t"
else
    print_status "‚úÖ Docker Compose ƒë√£ c√≥ s·∫µn"
fi

# Check UFW and open ports if needed
if command -v ufw &> /dev/null; then
    print_status "M·ªü ports c·∫ßn thi·∫øt..."
    ufw allow 80/tcp
    ufw allow 443/tcp
    ufw allow 1027/tcp
    ufw allow 1443/tcp
    print_status "‚úÖ Ports ƒë√£ ƒë∆∞·ª£c m·ªü"
fi

# 2. Stop existing services that might conflict
print_header "2. D·ªçn d·∫πp services conflicts"

# Stop Apache if running
systemctl stop apache2 2>/dev/null || true
systemctl disable apache2 2>/dev/null || true

# Don't stop nginx system as we need it for proxy
if systemctl is-active --quiet nginx; then
    print_status "System nginx ƒëang ch·∫°y - gi·ªØ nguy√™n cho proxy"
else
    print_status "System nginx ch∆∞a ch·∫°y - s·∫Ω c√†i ƒë·∫∑t"
fi

# Stop any existing docker containers
print_status "D·ªçn d·∫πp Docker containers c≈©..."
cd "$SCRIPT_DIR"
docker-compose down --remove-orphans 2>/dev/null || true
docker system prune -f

# 3. Prepare app structure
print_header "3. Chu·∫©n b·ªã c·∫•u tr√∫c app"

# Create directories
mkdir -p nginx/conf.d nginx/ssl uploads
print_status "‚úÖ ƒê√£ t·∫°o th∆∞ m·ª•c c·∫ßn thi·∫øt"

# Create default SSL certificates for Docker nginx
if [ ! -f "nginx/ssl/default.crt" ]; then
    print_status "T·∫°o default SSL certificates..."
    openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
        -keyout nginx/ssl/default.key \
        -out nginx/ssl/default.crt \
        -subj "/C=VN/ST=Vietnam/L=HCM/O=NQD/OU=IT/CN=localhost" \
        2>/dev/null
    chmod 644 nginx/ssl/default.crt
    chmod 600 nginx/ssl/default.key
    print_status "‚úÖ Default SSL certificates ƒë√£ t·∫°o"
fi

# 4. Build and start Docker services
print_header "4. Build v√† start Docker services"

print_status "Building Docker images..."
docker-compose build

print_status "Starting services step by step..."

# Start MariaDB first
print_status "Starting MariaDB..."
docker-compose up -d mariadb
sleep 5

# Start App
print_status "Starting App..."
docker-compose up -d app
sleep 5

# Start Nginx
print_status "Starting Docker Nginx..."
docker-compose up -d nginx

# Wait for all services
print_status "Ch·ªù services kh·ªüi ƒë·ªông..."
sleep 10

# Check services status
if docker-compose ps | grep -q "Up"; then
    print_status "‚úÖ Docker services ƒë√£ start th√†nh c√¥ng"
else
    print_error "‚ùå M·ªôt s·ªë Docker services kh√¥ng start ƒë∆∞·ª£c"
    docker-compose ps
    echo "Logs:"
    docker-compose logs
    exit 1
fi

# 5. Setup domain SSL v√† nginx proxy
print_header "5. Setup domain SSL v√† nginx proxy"

print_status "Ch·∫°y touch_domain.sh cho ${DOMAIN}..."
if sudo -u $SUDO_USER "${SCRIPT_DIR}/touch_domain.sh" "$DOMAIN"; then
    print_status "‚úÖ Domain setup th√†nh c√¥ng"
else
    print_warning "‚ö†Ô∏è Domain setup c√≥ l·ªói, th·ª≠ setup manual"
    # Manual fallback
    if "${SCRIPT_DIR}/setup_nginx_proxy.sh" "$DOMAIN"; then
        print_status "‚úÖ Manual nginx proxy setup th√†nh c√¥ng"
    else
        print_error "‚ùå Nginx proxy setup th·∫•t b·∫°i"
        exit 1
    fi
fi

# 6. Final checks
print_header "6. Ki·ªÉm tra cu·ªëi c√πng"

print_status "Ki·ªÉm tra Docker services..."
docker-compose ps

print_status "Ki·ªÉm tra system nginx..."
if systemctl is-active --quiet nginx; then
    print_status "‚úÖ System nginx ƒëang ch·∫°y"
else
    print_error "‚ùå System nginx kh√¥ng ch·∫°y"
    exit 1
fi

print_status "Test nginx config..."
if nginx -t; then
    print_status "‚úÖ Nginx config OK"
else
    print_error "‚ùå Nginx config c√≥ l·ªói"
    nginx -t
    exit 1
fi

# 7. Setup monitoring and auto-restart
print_header "7. Setup monitoring v√† auto-restart"

# Create systemd service for docker-compose
cat > /etc/systemd/system/nqd-app.service << EOF
[Unit]
Description=NQD Knowledge App
Requires=docker.service
After=docker.service

[Service]
Type=oneshot
RemainAfterExit=yes
WorkingDirectory=${SCRIPT_DIR}
ExecStart=/usr/local/bin/docker-compose up -d
ExecStop=/usr/local/bin/docker-compose down
TimeoutStartSec=0

[Install]
WantedBy=multi-user.target
EOF

systemctl daemon-reload
systemctl enable nqd-app.service
print_status "‚úÖ Auto-restart service ƒë√£ ƒë∆∞·ª£c setup"

# 8. Setup log rotation
print_header "8. Setup log rotation"

cat > /etc/logrotate.d/nqd-app << EOF
/var/log/nginx/${DOMAIN}_*.log {
    daily
    missingok
    rotate 52
    compress
    delaycompress
    notifempty
    create 644 www-data www-data
    postrotate
        systemctl reload nginx
    endscript
}
EOF

print_status "‚úÖ Log rotation ƒë√£ ƒë∆∞·ª£c setup"

# 9. Final status report
print_header "9. üéâ SETUP HO√ÄN T·∫§T!"

echo
echo "========================================"
echo "üìã TH√îNG TIN H·ªÜ TH·ªêNG:"
echo "========================================"
echo "üåê Domain: ${DOMAIN}"
echo "üîó Main URL: https://${DOMAIN}"
echo "üîó Direct URL: https://${DOMAIN}:1443"
echo "üìä Adminer: http://$(hostname -I | awk '{print $1}'):8080"
echo
echo "üìÅ ƒê∆∞·ªùng d·∫´n quan tr·ªçng:"
echo "  - App directory: ${SCRIPT_DIR}"
echo "  - Docker nginx config: ${SCRIPT_DIR}/nginx/conf.d/"
echo "  - System nginx config: /etc/nginx/sites-available/${DOMAIN}"
echo "  - SSL certificates: /etc/letsencrypt/live/${DOMAIN}/"
echo "  - Logs: /var/log/nginx/${DOMAIN}_*.log"
echo
echo "üîß L·ªánh qu·∫£n l√Ω h·ªØu √≠ch:"
echo "  - Xem status: docker-compose ps"
echo "  - Xem logs app: docker-compose logs -f app"
echo "  - Xem logs docker nginx: docker-compose logs -f nginx"
echo "  - Xem logs system nginx: sudo journalctl -u nginx -f"
echo "  - Restart app: sudo systemctl restart nqd-app"
echo "  - Restart nginx: sudo systemctl restart nginx"
echo "  - Domain manager: ./domain_manager.sh status"
echo
echo "üîí SSL Auto-renewal:"
echo "  - Certificates s·∫Ω t·ª± ƒë·ªông gia h·∫°n"
echo "  - Check renewal: sudo certbot renew --dry-run"
echo
echo "üìä Monitoring:"
echo "  - Service status: sudo systemctl status nqd-app nginx"
echo "  - Disk usage: df -h"
echo "  - Memory usage: free -h"
echo
print_status "üöÄ H·ªá th·ªëng ƒë√£ s·∫µn s√†ng! Truy c·∫≠p https://${DOMAIN}"

# 10. Post-setup instructions
print_header "10. H∆∞·ªõng d·∫´n sau khi setup"

echo
echo "üìù CHECKLIST SAU KHI SETUP:"
echo "=========================="
echo "‚ñ° Test truy c·∫≠p https://${DOMAIN}"
echo "‚ñ° Ki·ªÉm tra SSL certificate valid"
echo "‚ñ° Test ch·ª©c nƒÉng ƒëƒÉng nh·∫≠p/ƒëƒÉng k√Ω"
echo "‚ñ° Ki·ªÉm tra database connection"
echo "‚ñ° Setup backup cho database"
echo "‚ñ° Setup monitoring alerts"
echo
echo "‚ùó L∆ØU √ù QUAN TR·ªåNG:"
echo "=================="
echo "‚Ä¢ Domain ${DOMAIN} ph·∫£i tr·ªè v·ªÅ IP server n√†y"
echo "‚Ä¢ Firewall ph·∫£i m·ªü port 80 v√† 443"
echo "‚Ä¢ SSL certificates s·∫Ω expire sau 90 ng√†y (auto-renew enabled)"
echo "‚Ä¢ Database backup n√™n ƒë∆∞·ª£c setup ƒë·ªãnh k·ª≥"
echo "‚Ä¢ Monitor logs th∆∞·ªùng xuy√™n ƒë·ªÉ ph√°t hi·ªán issues"
echo
print_status "üéä CH√öC M·ª™NG! Setup ho√†n t·∫•t th√†nh c√¥ng!"

# Test final connectivity
print_status "Testing final connectivity..."
sleep 5
if curl -s -o /dev/null -w "%{http_code}" "https://${DOMAIN}" | grep -q "200\|301\|302"; then
    print_status "‚úÖ Website accessible!"
else
    print_warning "‚ö†Ô∏è Website might not be accessible yet. Check DNS and firewall."
fi